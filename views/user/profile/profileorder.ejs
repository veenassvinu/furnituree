<%- include("../../views/partials/user/header.ejs") %>
<%- include("../../views/partials/user/navBar") %>

<link rel="stylesheet" href="/css/profile.css">

<div class="profile-session-container">
    <div class="container-fluid">
        <div class="dashboard">
            <!-- Sidebar -->
            <%- include("../../views/partials/user/profileSideBar") %>

            <!-- Main Content -->
            <div class="main-content">
                <div class="content">
                    <div class="orders-header">
                        <h2>Your Orders</h2>
                    </div>

                    <div class="orders-table-container">
                        <table class="orders-table">
                            <thead>
                                <tr>
                                    <th>Order #</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Total</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (orders && orders.length > 0) { %>
                                    <% orders.forEach(order => { %>
                                        <tr id="order-<%= order._id %>">
                                            <td>
                                                <span class="order-id">#<%= order.orderId.toString() %></span>
                                            </td>
                                            <td>
                                                <span class="order-date"><%= order.createdAt.toDateString() %></span>
                                            </td>
                                            <td>
                                                <span class="status-badge status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
                                                    <%= order.status %>
                                                </span>
                                            </td>
                                            <td>
                                                <span class="order-total">â‚¹<%= order.totalPrice.toFixed(2) %></span>
                                            </td>
                                            <td class="actions-cell">
                                                <div class="action-buttons">
                                                    <a href="/orders/<%= order._id %>" class="btn btn-view">View</a>
                                                    <% if (order.status !== 'Cancelled' && order.status !== 'Returned') { %>
                                                        <button class="btn btn-cancel" onclick="cancelOrder('<%= order._id %>', '<%= order.totalPrice %>')">Cancel</button>
                                                    <% } %>
                                                </div>
                                            </td>
                                        </tr>
                                    <% }) %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="5" class="no-orders">
                                            <div class="empty-state">
                                                <i class="icon-orders"></i>
                                                <p>No orders found</p>
                                                <span>Start shopping to see your orders here</span>
                                            </div>
                                        </td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination Controls -->
                    <% if (totalPages > 1) { %>
                        <div class="pagination-container">
                            <nav class="pagination">
                                <% if (hasPrevPage) { %>
                                    <a href="/profileorder?page=<%= currentPage - 1 %>" class="page-link prev-link">
                                        <i class="icon-arrow-left"></i>
                                        Previous
                                    </a>
                                <% } %>

                                <div class="page-numbers">
                                    <% for (let i = 1; i <= totalPages; i++) { %>
                                        <a href="/profileorder?page=<%= i %>" class="page-link <%= currentPage === i ? 'active' : '' %>">
                                            <%= i %>
                                        </a>
                                    <% } %>
                                </div>

                                <% if (hasNextPage) { %>
                                    <a href="/profileorder?page=<%= currentPage + 1 %>" class="page-link next-link">
                                        Next
                                        <i class="icon-arrow-right"></i>
                                    </a>
                                <% } %>
                            </nav>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Enhanced CSS for better alignment and styling */
.orders-header {
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #f0f0f0;
}

.orders-header h2 {
    margin: 0;
    color: #333;
    font-size: 1.8rem;
    font-weight: 600;
}

.orders-table-container {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    margin-bottom: 2rem;
}

.orders-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.95rem;
}

.orders-table thead th {
    background: #f8f9fa;
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: #333;
    border-bottom: 2px solid #e9ecef;
}

.orders-table tbody td {
    padding: 1rem;
    border-bottom: 1px solid #f0f0f0;
    vertical-align: middle;
}

.orders-table tbody tr:hover {
    background-color: #f8f9fa;
}

.order-id {
    font-weight: 600;
    color: #007bff;
}

.order-date {
    color: #666;
}

.status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.status-pending {
    background-color: #fff3cd;
    color: #856404;
}

.status-processing {
    background-color: #d1ecf1;
    color: #0c5460;
}

.status-shipped {
    background-color: #d4edda;
    color: #155724;
}

.status-delivered {
    background-color: #d4edda;
    color: #155724;
}

.status-cancelled {
    background-color: #f8d7da;
    color: #721c24;
}

.status-returned {
    background-color: #e2e3e5;
    color: #383d41;
}

.order-total {
    font-weight: 600;
    color: #28a745;
    font-size: 1rem;
}

.actions-cell {
    text-align: center;
}

.action-buttons {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    flex-wrap: wrap;
}

.btn {
    padding: 0.4rem 1rem;
    border-radius: 4px;
    text-decoration: none;
    font-size: 0.85rem;
    font-weight: 500;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-view {
    background-color: #007bff;
    color: white;
}

.btn-view:hover {
    background-color: #0056b3;
    color: white;
    text-decoration: none;
}

.btn-cancel {
    background-color: #dc3545;
    color: white;
}

.btn-cancel:hover {
    background-color: #c82333;
    color: white;
    text-decoration: none;
}

.no-orders {
    text-align: center;
    padding: 3rem 1rem;
}

.empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
}

.empty-state p {
    margin: 0;
    font-size: 1.1rem;
    color: #666;
    font-weight: 500;
}

.empty-state span {
    color: #999;
    font-size: 0.9rem;
}

.pagination-container {
    display: flex;
    justify-content: center;
    margin-top: 2rem;
}

.pagination {
    display: flex;
    align-items: center;
    gap: 1rem;
    background: white;
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.page-numbers {
    display: flex;
    gap: 0.25rem;
}

.page-link {
    padding: 0.5rem 1rem;
    text-decoration: none;
    color: #007bff;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.page-link:hover {
    background-color: #e9ecef;
    text-decoration: none;
}

.page-link.active {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
}

.prev-link,
.next-link {
    font-weight: 500;
}

/* Responsive Design */
@media (max-width: 768px) {
    .orders-table-container {
        overflow-x: auto;
    }

    .orders-table {
        min-width: 600px;
    }

    .action-buttons {
        flex-direction: column;
        gap: 0.25rem;
    }

    .btn {
        font-size: 0.8rem;
        padding: 0.3rem 0.8rem;
    }

    .pagination {
        flex-direction: column;
        gap: 0.5rem;
    }

    .page-numbers {
        flex-wrap: wrap;
        justify-content: center;
    }
}

@media (max-width: 480px) {
    .orders-header h2 {
        font-size: 1.5rem;
    }

    .orders-table thead th,
    .orders-table tbody td {
        padding: 0.75rem 0.5rem;
        font-size: 0.85rem;
    }

    .status-badge {
        font-size: 0.75rem;
        padding: 0.2rem 0.5rem;
    }
}
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
async function cancelOrder(orderId, totalPrice) {
    console.log(`Attempting to cancel order: ${orderId}`); // Debugging
    try {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: `Do you want to cancel this order? â‚¹${parseFloat(totalPrice).toFixed(2)} will be refunded to your wallet.`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it'
        });

        if (!result.isConfirmed) {
            console.log('Cancellation aborted by user');
            return;
        }

        Swal.fire({
            title: 'Processing...',
            text: 'Cancelling your order',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await fetch(`/orders/${orderId}/cancel`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });

        const data = await response.json();
        console.log('Server response:', data); // Debugging

        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Order Cancelled!',
                text: `Order has been cancelled and â‚¹${parseFloat(totalPrice).toFixed(2)} has been refunded to your wallet.`,
                timer: 3000,
                showConfirmButton: false
            });

            // Update UI
            const statusBadge = document.querySelector(`#order-${orderId} .status-badge`);
            if (statusBadge) {
                statusBadge.textContent = 'Cancelled';
                statusBadge.className = 'status-badge status-cancelled';
            }

            const cancelButton = document.querySelector(`#order-${orderId} .btn-cancel`);
            if (cancelButton) {
                cancelButton.remove();
            }
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Cancellation Failed',
                text: data.message || 'Failed to cancel the order'
            });
        }
    } catch (error) {
        console.error('Error cancelling order:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An error occurred while cancelling the order. Please try again.'
        });
    }
}
</script>