<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="/css/address.css">


<%- include("../../views/partials/user/header.ejs") %>
    <%- include("../../views/partials/user/navBar") %>


        <link rel="stylesheet" href="/css/profile.css">


        <div class="profile-session-container">
            <div class="container-fluid">
                <div class="dashboard">
                    <!-- Sidebar -->
                    <%- include("../../views/partials/user/profileSideBar") %>

                        <!-- Main Content -->
                        <div class="main-content">
                            

                        </div>
                </div>
            </div>
        </div>



        <script>
            // Make addresses available in JS
            window.addresses = JSON.parse('<%- JSON.stringify(addresses || []) %>');

            // Validation functions
            const validationRules = {
                name: {
                    pattern: /^[A-Za-z\s]+$/,
                    message: "Name should contain only letters and spaces (no numbers, special characters, or zeros)"
                },
                phone: {
                    pattern: /^[1-9][0-9]{9}$/,
                    message: "Phone number must be 10 digits and cannot start with 0"
                },
                email: {
                    pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
                    message: "Please enter a valid email address"
                },
                city: {
                    pattern: /^[A-Za-z\s]+$/,
                    message: "City should contain only letters and spaces"
                },
                state: {
                    pattern: /^[A-Za-z\s]+$/,
                    message: "State should contain only letters and spaces"
                },
                country: {
                    pattern: /^[A-Za-z\s]+$/,
                    message: "Country should contain only letters and spaces"
                },
                pincode: {
                    pattern: /^[1-9][0-9]{5}$/,
                    message: "Pincode must be 6 digits and cannot start with 0"
                },
                landmark: {
                    pattern: /^.{2,}$/,
                    message: "Landmark must be at least 2 characters long"
                }
            };

            function validateField(fieldId, value, rule) {
                const errorElement = document.getElementById(fieldId + "Error");
                const inputElement = document.getElementById(fieldId);

                if (!value.trim()) {
                    errorElement.textContent = "This field is required";
                    inputElement.classList.add('is-invalid');
                    inputElement.classList.remove('is-valid');
                    return false;
                }

                if (rule && !rule.pattern.test(value.trim())) {
                    errorElement.textContent = rule.message;
                    inputElement.classList.add('is-invalid');
                    inputElement.classList.remove('is-valid');
                    return false;
                }

                errorElement.textContent = "";
                inputElement.classList.remove('is-invalid');
                inputElement.classList.add('is-valid');
                return true;
            }

            function validateSelectField(fieldId, value) {
                const errorElement = document.getElementById(fieldId + "Error");
                const selectElement = document.getElementById(fieldId);

                if (!value) {
                    errorElement.textContent = "Please select an option";
                    selectElement.classList.add('is-invalid');
                    selectElement.classList.remove('is-valid');
                    return false;
                }

                errorElement.textContent = "";
                selectElement.classList.remove('is-invalid');
                selectElement.classList.add('is-valid');
                return true;
            }

            function validateForm(form) {
                let isValid = true;
                const isEditForm = form.id === 'editAddressForm';

                // Validate address type
                const addressTypeId = isEditForm ? 'editAddressType' : 'addressType';
                const addressType = document.getElementById(addressTypeId).value;
                if (!validateSelectField(addressTypeId, addressType)) {
                    isValid = false;
                }

                // Validate name
                const nameId = isEditForm ? 'editName' : 'fullName';
                const name = document.getElementById(nameId).value;
                if (!validateField(nameId, name, validationRules.name)) {
                    isValid = false;
                }

                // Validate phone
                const phoneId = isEditForm ? 'editPhone' : 'phone';
                const phone = document.getElementById(phoneId).value;
                if (!validateField(phoneId, phone, validationRules.phone)) {
                    isValid = false;
                }

                // Validate email (optional)
                const emailId = isEditForm ? 'editEmail' : 'email';
                const email = document.getElementById(emailId).value;
                if (email.trim() && !validateField(emailId, email, validationRules.email)) {
                    isValid = false;
                } else if (!email.trim()) {
                    document.getElementById(emailId + "Error").textContent = "";
                    document.getElementById(emailId).classList.remove('is-invalid', 'is-valid');
                }

                // Validate landmark
                const landmarkId = isEditForm ? 'editLandmark' : 'streetAddress';
                const landmark = document.getElementById(landmarkId).value;
                if (!validateField(landmarkId, landmark, validationRules.landmark)) {
                    isValid = false;
                }

                // Validate city
                const cityId = isEditForm ? 'editCity' : 'city';
                const city = document.getElementById(cityId).value;
                if (!validateField(cityId, city, validationRules.city)) {
                    isValid = false;
                }

                // Validate state
                const stateId = isEditForm ? 'editState' : 'state';
                const state = document.getElementById(stateId).value;
                if (!validateField(stateId, state, validationRules.state)) {
                    isValid = false;
                }

                // Validate pincode
                const pincodeId = isEditForm ? 'editPincode' : 'PinCode';
                const pincode = document.getElementById(pincodeId).value;
                if (!validateField(pincodeId, pincode, validationRules.pincode)) {
                    isValid = false;
                }

                // Validate country
                const countryId = isEditForm ? 'editCountry' : 'country';
                const country = document.getElementById(countryId).value;
                if (!validateField(countryId, country, validationRules.country)) {
                    isValid = false;
                }

                return isValid;
            }

            // Add real-time validation
            function addRealTimeValidation() {
                const fields = [
                    { id: 'fullName', rule: validationRules.name },
                    { id: 'phone', rule: validationRules.phone },
                    { id: 'email', rule: validationRules.email },
                    { id: 'streetAddress', rule: validationRules.landmark },
                    { id: 'city', rule: validationRules.city },
                    { id: 'state', rule: validationRules.state },
                    { id: 'PinCode', rule: validationRules.pincode },
                    { id: 'country', rule: validationRules.country }
                ];

                const editFields = [
                    { id: 'editName', rule: validationRules.name },
                    { id: 'editPhone', rule: validationRules.phone },
                    { id: 'editEmail', rule: validationRules.email },
                    { id: 'editLandmark', rule: validationRules.landmark },
                    { id: 'editCity', rule: validationRules.city },
                    { id: 'editState', rule: validationRules.state },
                    { id: 'editPincode', rule: validationRules.pincode },
                    { id: 'editCountry', rule: validationRules.country }
                ];

                [...fields, ...editFields].forEach(field => {
                    const element = document.getElementById(field.id);
                    if (element) {
                        element.addEventListener('blur', function () {
                            if (field.id === 'email' || field.id === 'editEmail') {
                                if (this.value.trim()) {
                                    validateField(field.id, this.value, field.rule);
                                }
                            } else {
                                validateField(field.id, this.value, field.rule);
                            }
                        });

                        element.addEventListener('input', function () {
                            // Clear error state while typing
                            const errorElement = document.getElementById(field.id + "Error");
                            if (this.classList.contains('is-invalid')) {
                                errorElement.textContent = "";
                                this.classList.remove('is-invalid');
                            }
                        });
                    }
                });

                // Add validation for select fields
                ['addressType', 'editAddressType'].forEach(id => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.addEventListener('change', function () {
                            validateSelectField(id, this.value);
                        });
                    }
                });
            }

            document.addEventListener("DOMContentLoaded", () => {
                // Prefill form with user data
                const userName = "<%= typeof user !== 'undefined' ? user.name : '' %>";
                const userEmail = "<%= typeof user !== 'undefined' ? user.email : '' %>";
                if (userName) document.getElementById("fullName").value = userName;
                if (userEmail) document.getElementById("email").value = userEmail;
                document.getElementById("country").value = "India";

                // Add real-time validation
                addRealTimeValidation();

                // Handle Add Address Form Submission
                document.getElementById("addressForm").addEventListener("submit", async (e) => {
                    e.preventDefault();

                    if (!validateForm(e.target)) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Validation Error',
                            text: 'Please correct the errors in the form before submitting.',
                            confirmButtonColor: '#d33'
                        });
                        return;
                    }

                    const formData = new FormData(e.target);
                    const formObj = Object.fromEntries(formData.entries());

                    try {
                        const res = await fetch("/save-address", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(formObj),
                            credentials: "include"
                        });

                        const data = await res.json();

                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Address Saved',
                                text: '✅ Address saved successfully!',
                                confirmButtonColor: '#3085d6'
                            }).then(() => {
                                e.target.reset();
                                // Clear all validation states
                                document.querySelectorAll('.form-control').forEach(el => {
                                    el.classList.remove('is-valid', 'is-invalid');
                                });
                                document.querySelectorAll('.error-message').forEach(el => {
                                    el.textContent = '';
                                });
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to save address',
                                confirmButtonColor: '#d33'
                            });
                        }
                    } catch (err) {
                        console.error(err);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Something went wrong!',
                            confirmButtonColor: '#d33'
                        });
                    }
                });

                // Handle Edit Button Click
                document.querySelectorAll(".editAddressBtn").forEach(button => {
                    button.addEventListener("click", function () {
                        const addressId = this.dataset.id;
                        const index = parseInt(this.dataset.index);

                        if (!window.addresses || index >= window.addresses.length || !window.addresses[index]) {
                            console.error("Address not found for index:", index);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Address data not found!',
                                confirmButtonColor: '#d33'
                            });
                            return;
                        }

                        const address = window.addresses[index];

                        // Clear previous validation states
                        document.querySelectorAll('#editAddressModal .form-control').forEach(el => {
                            el.classList.remove('is-valid', 'is-invalid');
                        });
                        document.querySelectorAll('#editAddressModal .error-message').forEach(el => {
                            el.textContent = '';
                        });

                        // Populate modal fields
                        document.getElementById("editAddressId").value = addressId;
                        document.getElementById("editAddressType").value = address.addressType || "";
                        document.getElementById("editName").value = address.name || "";
                        document.getElementById("editPhone").value = address.phone || "";
                        document.getElementById("editEmail").value = address.email || "";
                        document.getElementById("editLandmark").value = address.landMark || "";
                        document.getElementById("editCity").value = address.city || "";
                        document.getElementById("editState").value = address.state || "";
                        document.getElementById("editPincode").value = address.pincode || "";
                        document.getElementById("editCountry").value = address.country || "";

                        const modal = new bootstrap.Modal(document.getElementById("editAddressModal"));
                        modal.show();
                    });
                });

                // Handle Update Form Submit
                document.getElementById("editAddressForm").addEventListener("submit", async function (e) {
                    e.preventDefault();

                    if (!validateForm(e.target)) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Validation Error',
                            text: 'Please correct the errors in the form before updating.',
                            confirmButtonColor: '#d33'
                        });
                        return;
                    }

                    const formData = new FormData(this);
                    const data = Object.fromEntries(formData.entries());

                    try {
                        const res = await fetch(`/update-address/${data.addressId}`, {
                            method: "PUT",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(data),
                            credentials: "include"
                        });

                        const result = await res.json();

                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Address Updated',
                                text: 'Address updated successfully!',
                                confirmButtonColor: '#3085d6'
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: result.message || 'Failed to update address',
                                confirmButtonColor: '#d33'
                            });
                        }
                    } catch (err) {
                        console.error("Error updating address:", err);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Something went wrong!',
                            confirmButtonColor: '#d33'
                        });
                    }
                });

                // Handle Delete Button Click
                document.querySelectorAll(".deleteAddressBtn").forEach(button => {
                    button.addEventListener("click", async function () {
                        const addressId = this.dataset.id;

                        const confirmDelete = await Swal.fire({
                            title: 'Are you sure?',
                            text: "You won't be able to revert this!",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, delete it!'
                        });

                        if (confirmDelete.isConfirmed) {
                            try {
                                const res = await fetch(`/delete-address/${addressId}`, {
                                    method: "DELETE",
                                    headers: { "Content-Type": "application/json" },
                                    credentials: "include"
                                });

                                const data = await res.json();
                                if (data.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Deleted',
                                        text: 'Address deleted successfully!',
                                        confirmButtonColor: '#3085d6'
                                    }).then(() => {
                                        location.reload();
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: data.message || 'Failed to delete address',
                                        confirmButtonColor: '#d33'
                                    });
                                }
                            } catch (err) {
                                console.error("Error deleting address:", err);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Something went wrong!',
                                    confirmButtonColor: '#d33'
                                });
                            }
                        }
                    });
                });
            });
        </script>