<%- include("../../views/partials/user/header.ejs") %>
<%- include("../../views/partials/user/navBar") %>

<link rel="stylesheet" href="/css/profile.css">

<div class="profile-session-container">
    <div class="container-fluid">
        <div class="dashboard">
            <!-- Sidebar -->
            <%- include("../../views/partials/user/profileSideBar") %>

            <!-- Main Content -->
            <div class="main-content">
                <div class="profile-header">
                    <h2 class="section-title">Update Profile</h2>
                    <p class="section-subtitle">Manage your personal information</p>
                </div>

                <div class="profile-form-container">
                    <!-- Name Field -->
                    <div class="profile-field-group">
                        <label for="name" class="form-label profile-label">NAME</label>
                        <div class="profile-value-container">
                            <div class="profile-value" id="nameValue">
                                <%= userData.name %>
                            </div>
                            <button class="edit-btn" data-field="name" title="Edit Name">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                                     stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Email Field -->
                    <div class="profile-field-group">
                        <label for="email" class="form-label profile-label">EMAIL</label>
                        <div class="profile-value-container">
                            <div class="profile-value" id="emailValue">
                                <%= userData.email %>
                            </div>
                            <button class="edit-btn" data-field="email" title="Edit Email">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                                     stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Phone Field -->
                    <div class="profile-field-group">
                        <label for="phone" class="form-label profile-label">PHONE NUMBER</label>
                        <div class="profile-value-container">
                            <div class="profile-value" id="phoneValue">
                                <%= userData.phone || 'Not Set' %>
                            </div>
                            <button class="edit-btn" data-field="phone" title="Edit Phone">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                                     stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Password Field -->
                    <div class="profile-field-group">
                        <label for="password" class="form-label profile-label">PASSWORD</label>
                        <div class="profile-value-container">
                            <div class="profile-value" id="passwordValue">* * * * * * * *</div>
                            <button class="edit-btn" data-field="password" title="Change Password">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                                     stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="profile-actions">
                        <button class="btn btn-custom" id="saveChangesBtn" style="display: none;">Save Changes</button>
                        <button class="btn btn-secondary" id="cancelChangesBtn" style="display: none;">Cancel</button>
                    </div>
                </div>

                <!-- Password Update Modal -->
                <div class="password-modal" id="passwordModal">
                    <div class="password-modal-content">
                        <div class="modal-header">
                            <h3>Update Password</h3>
                            <button class="modal-close" id="closePasswordModal">&times;</button>
                        </div>

                        <div class="modal-body">
                            <div class="password-input-group">
                                <label for="currentPassword" class="form-label">Current Password</label>
                                <input type="password" class="form-control" id="currentPassword"
                                       placeholder="Enter current password" name="CurrentPassword">
                                <div class="error-message" id="currentPasswordError"></div>
                            </div>

                            <div class="password-input-group">
                                <label for="newPassword" class="form-label">New Password</label>
                                <input type="password" class="form-control" id="newPassword"
                                       placeholder="Enter new password" name="NewPassword">
                                <div class="error-message" id="newPasswordError"></div>
                                <div class="password-requirements">
                                    <small>Password must contain at least 8 characters, including uppercase, lowercase, number, and special character</small>
                                </div>
                            </div>

                            <div class="password-input-group">
                                <label for="confirmPassword" class="form-label">Confirm New Password</label>
                                <input type="password" class="form-control" id="confirmPassword"
                                       placeholder="Confirm new password" name="ConfirmNewPassword">
                                <div class="error-message" id="confirmPasswordError"></div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button class="btn btn-custom" id="updatePasswordBtn">Update Password</button>
                            <button class="btn btn-secondary" id="cancelPasswordBtn">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Enhanced Profile Styling */
.profile-header {
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #f0f0f0;
}

.section-title {
    margin: 0 0 0.5rem 0;
    color: #333;
    font-size: 1.8rem;
    font-weight: 600;
}

.section-subtitle {
    margin: 0;
    color: #666;
    font-size: 0.95rem;
}

.profile-form-container {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.profile-field-group {
    margin-bottom: 2rem;
    position: relative;
}

.profile-label {
    display: block;
    font-weight: 600;
    color: #333;
    margin-bottom: 0.75rem;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.profile-value-container {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    background: #f8f9fa;
    transition: all 0.3s ease;
}

.profile-value-container:hover {
    border-color: #007bff;
    background: white;
}

.profile-value {
    flex: 1;
    font-size: 1rem;
    color: #333;
    min-height: 1.5rem;
    padding: 0.25rem 0;
}

.profile-input {
    flex: 1;
    border: none;
    background: transparent;
    font-size: 1rem;
    color: #333;
    outline: none;
    padding: 0.25rem 0;
}

.edit-btn {
    background: #007bff;
    border: none;
    border-radius: 50%;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0.7;
}

.edit-btn:hover {
    opacity: 1;
    transform: scale(1.1);
    background: #0056b3;
}

.profile-actions {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid #e9ecef;
    display: flex;
    gap: 1rem;
    justify-content: center;
}

.btn {
    padding: 0.75rem 2rem;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.95rem;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.btn-custom {
    background: #007bff;
    color: white;
}

.btn-custom:hover {
    background: #0056b3;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
}

.btn-secondary {
    background: #6c757d;
    color: white;
}

.btn-secondary:hover {
    background: #545b62;
}

/* Password Modal Styling */
.password-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
}

.password-modal.show {
    display: flex;
}

.password-modal-content {
    background: white;
    border-radius: 12px;
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 2rem;
    border-bottom: 1px solid #e9ecef;
}

.modal-header h3 {
    margin: 0;
    color: #333;
    font-size: 1.4rem;
    font-weight: 600;
}

.modal-close {
    background: none;
    border: none;
    font-size: 1.8rem;
    color: #666;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.3s ease;
}

.modal-close:hover {
    background: #f8f9fa;
    color: #333;
}

.modal-body {
    padding: 2rem;
}

.modal-footer {
    padding: 1.5rem 2rem;
    border-top: 1px solid #e9ecef;
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
}

.password-input-group {
    margin-bottom: 1.5rem;
}

.password-input-group .form-label {
    display: block;
    font-weight: 600;
    color: #333;
    margin-bottom: 0.5rem;
}

.password-input-group .form-control {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
}

.password-input-group .form-control:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
}

.password-requirements {
    margin-top: 0.5rem;
}

.password-requirements small {
    color: #666;
    font-size: 0.85rem;
}

.error-message {
    display: none;
    color: #dc3545;
    font-size: 0.85rem;
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: #f8d7da;
    border-radius: 4px;
    border: 1px solid #f5c6cb;
}

/* Responsive Design */
@media (max-width: 768px) {
    .profile-form-container {
        padding: 1.5rem;
        margin: 0 1rem;
    }
    
    .profile-value-container {
        padding: 0.75rem;
    }
    
    .profile-actions {
        flex-direction: column;
    }
    
    .btn {
        width: 100%;
        justify-content: center;
    }
    
    .password-modal-content {
        width: 95%;
        margin: 1rem;
    }
    
    .modal-header,
    .modal-body,
    .modal-footer {
        padding: 1rem 1.5rem;
    }
    
    .modal-footer {
        flex-direction: column;
    }
}

@media (max-width: 480px) {
    .section-title {
        font-size: 1.5rem;
    }
    
    .profile-label {
        font-size: 0.8rem;
    }
    
    .profile-value {
        font-size: 0.9rem;
    }
    
    .edit-btn {
        width: 32px;
        height: 32px;
    }
}
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const editButtons = document.querySelectorAll('.edit-btn');
    const passwordModal = document.getElementById('passwordModal');
    const cancelPasswordBtn = document.getElementById('cancelPasswordBtn');
    const updatePasswordBtn = document.getElementById('updatePasswordBtn');
    const closePasswordModal = document.getElementById('closePasswordModal');
    const saveChangesBtn = document.getElementById('saveChangesBtn');
    const cancelChangesBtn = document.getElementById('cancelChangesBtn');

    const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    const phonePattern = /^\d{10}$/;
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    let hasChanges = false;
    let originalValues = {};

    // Store original values
    ['name', 'email', 'phone'].forEach(field => {
        const element = document.getElementById(`${field}Value`);
        originalValues[field] = element.textContent.trim();
    });

    function showActionButtons() {
        if (!hasChanges) {
            saveChangesBtn.style.display = 'inline-flex';
            cancelChangesBtn.style.display = 'inline-flex';
            hasChanges = true;
        }
    }

    function hideActionButtons() {
        saveChangesBtn.style.display = 'none';
        cancelChangesBtn.style.display = 'none';
        hasChanges = false;
    }

    editButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            const field = e.currentTarget.dataset.field;

            if (field === 'password') {
                passwordModal.classList.add('show');
                return;
            }

            const valueElement = document.getElementById(`${field}Value`);
            if (valueElement.tagName === 'INPUT') return;

            const currentValue = valueElement.textContent.trim();
            const inputValue = currentValue === 'Not Set' ? '' : currentValue;

            valueElement.outerHTML = `
                <input 
                    type="${field === 'phone' ? 'tel' : field === 'email' ? 'email' : 'text'}"
                    class="profile-input" 
                    id="${field}Value" 
                    value="${inputValue}"
                    ${field === 'phone' ? 'pattern="[0-9]{10}"' : ''}
                    ${field === 'phone' ? 'maxlength="10"' : 'maxlength="50"'}
                    placeholder="Enter ${field}"
                />
            `;

            const inputElement = document.getElementById(`${field}Value`);
            inputElement.focus();
            inputElement.select();

            inputElement.addEventListener('blur', () => saveEdit(field));
            inputElement.addEventListener('keypress', (event) => {
                if (event.key === 'Enter') {
                    inputElement.blur();
                }
            });

            inputElement.addEventListener('input', () => {
                if (inputElement.value.trim() !== originalValues[field]) {
                    showActionButtons();
                }
            });
        });
    });

    function saveEdit(field) {
        const inputElement = document.getElementById(`${field}Value`);
        const newValue = inputElement.value.trim();

        if (validateInput(field, newValue)) {
            const displayValue = (field === 'phone' && !newValue) ? 'Not Set' : newValue;
            
            inputElement.outerHTML = `
                <div class="profile-value" id="${field}Value">${displayValue}</div>
            `;

            if (newValue !== originalValues[field]) {
                showActionButtons();
            }
        } else {
            inputElement.outerHTML = `
                <div class="profile-value" id="${field}Value">${originalValues[field]}</div>
            `;
        }
    }

    function validateInput(field, value) {
        switch (field) {
            case 'name':
                if (value.length < 2) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Name',
                        text: 'Name must be at least 2 characters long'
                    });
                    return false;
                }
                if (!/^[a-zA-Z\s]+$/.test(value)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Name',
                        text: 'Name can only contain letters and spaces'
                    });
                    return false;
                }
                return true;

            case 'email':
                if (!emailPattern.test(value)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Email',
                        text: 'Please enter a valid email address'
                    });
                    return false;
                }
                return true;

            case 'phone':
                if (value === '') return true;
                if (!phonePattern.test(value)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Phone',
                        text: 'Please enter a valid 10-digit phone number'
                    });
                    return false;
                }
                return true;

            default:
                return true;
        }
    }

    // Save Changes Button Handler
    saveChangesBtn.addEventListener('click', () => {
        const updatedName = document.getElementById('nameValue').textContent.trim();
        const updatedEmail = document.getElementById('emailValue').textContent.trim();
        const updatedPhone = document.getElementById('phoneValue').textContent.trim();

        const updateData = {};
        let hasRealChanges = false;

        if (updatedName !== originalValues.name) {
            updateData.name = updatedName;
            hasRealChanges = true;
        }
        if (updatedEmail !== originalValues.email) {
            updateData.email = updatedEmail;
            hasRealChanges = true;
        }
        if (updatedPhone !== originalValues.phone) {
            updateData.phone = updatedPhone === 'Not Set' ? '' : updatedPhone;
            hasRealChanges = true;
        }

        if (!hasRealChanges) {
            Swal.fire({
                icon: 'info',
                title: 'No Changes',
                text: 'No changes were made to save'
            });
            return;
        }

        // Show loading
        Swal.fire({
            title: 'Saving Changes...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        fetch('profile/profile', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateData),
        })
        .then(response => response.json())
        .then(data => {
            if (data.message === 'Profile updated successfully') {
                // Update original values
                originalValues.name = data.user.name || updatedName;
                originalValues.email = data.user.email || updatedEmail;
                originalValues.phone = data.user.phone || updatedPhone;

                hideActionButtons();

                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Profile updated successfully',
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: data.message || 'Failed to update profile'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'An error occurred while updating profile'
            });
        });
    });

    // Cancel Changes Button Handler
    cancelChangesBtn.addEventListener('click', () => {
        Swal.fire({
            title: 'Discard Changes?',
            text: 'Are you sure you want to discard all unsaved changes?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, discard',
            cancelButtonText: 'Keep editing'
        }).then((result) => {
            if (result.isConfirmed) {
                // Reset all values to original
                document.getElementById('nameValue').textContent = originalValues.name;
                document.getElementById('emailValue').textContent = originalValues.email;
                document.getElementById('phoneValue').textContent = originalValues.phone;
                
                hideActionButtons();
                
                Swal.fire({
                    icon: 'info',
                    title: 'Changes Discarded',
                    text: 'All changes have been discarded',
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        });
    });

    // Password Modal Handlers
    function closePasswordModalHandler() {
        passwordModal.classList.remove('show');
        ['currentPassword', 'newPassword', 'confirmPassword'].forEach(id => {
            document.getElementById(id).value = '';
            document.getElementById(`${id}Error`).style.display = 'none';
        });
    }

    closePasswordModal.addEventListener('click', closePasswordModalHandler);
    cancelPasswordBtn.addEventListener('click', closePasswordModalHandler);

    // Close modal when clicking outside
    passwordModal.addEventListener('click', (e) => {
        if (e.target === passwordModal) {
            closePasswordModalHandler();
        }
    });

    updatePasswordBtn.addEventListener('click', () => {
        const currentPassword = document.getElementById('currentPassword');
        const newPassword = document.getElementById('newPassword');
        const confirmPassword = document.getElementById('confirmPassword');

        // Clear previous errors
        ['currentPassword', 'newPassword', 'confirmPassword'].forEach(id => {
            document.getElementById(`${id}Error`).style.display = 'none';
        });

        let hasError = false;

        if (!currentPassword.value.trim()) {
            document.getElementById('currentPasswordError').textContent = 'Current password is required';
            document.getElementById('currentPasswordError').style.display = 'block';
            hasError = true;
        }

        if (!passwordPattern.test(newPassword.value)) {
            document.getElementById('newPasswordError').textContent = 'Password must contain at least 8 characters, including uppercase, lowercase, number, and special character';
            document.getElementById('newPasswordError').style.display = 'block';
            hasError = true;
        }

        if (newPassword.value !== confirmPassword.value) {
            document.getElementById('confirmPasswordError').textContent = 'Passwords do not match';
            document.getElementById('confirmPasswordError').style.display = 'block';
            hasError = true;
        }

        if (hasError) return;

        // Show loading
        Swal.fire({
            title: 'Updating Password...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        fetch('profile/profile', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                currentPassword: currentPassword.value,
                newPassword: newPassword.value,
                confirmNewPassword: confirmPassword.value
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.message === "Password updated successfully") {
                closePasswordModalHandler();
                
                Swal.fire({
                    icon: 'success',
                    title: 'Password Updated!',
                    text: 'Your password has been updated successfully',
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                Swal.close();
                document.getElementById('currentPasswordError').textContent = data.message;
                document.getElementById('currentPasswordError').style.display = 'block';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'An error occurred while updating password'
            });
        });
    });
});
</script>