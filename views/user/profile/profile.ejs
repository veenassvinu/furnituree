<%- include("../../views/partials/user/header.ejs") %>
<%- include("../../views/partials/user/navBar") %>

<link rel="stylesheet" href="/css/profile.css">

<div class="profile-session-container">
    <div class="container-fluid">
        <div class="dashboard">
            <!-- Sidebar -->
            <%- include("../../views/partials/user/profileSideBar") %>

            <!-- Main Content -->
            <div class="main-content">
                <div class="profile-header">
                    <h2 class="section-title">Update Profile</h2>
                    <p class="section-subtitle">Manage your personal information</p>
                </div>

                <div class="profile-form-container">
                    <!-- Profile Image Field -->
                    <div class="profile-field-group">
                        <label for="profileImage" class="form-label profile-label">PROFILE IMAGE</label>
                        <div class="profile-value-container">
                            <% if (userData.profileImage) { %>
                                <img src="/uploads/profile-images/<%= userData.profileImage %>" alt="Profile Image" class="profile-image" style="width: 100px; height: 100px; border-radius: 50%; object-fit: cover;">
                                <button class="edit-btn" data-field="profileImage" title="Change Profile Image">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                                    </svg>
                                </button>
                                <button class="remove-image-btn" data-field="profileImage" title="Remove Profile Image">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            <% } else { %>
                                <div class="profile-value" id="profileImageValue">No Profile Image Set</div>
                                <button class="edit-btn" data-field="profileImage" title="Add Profile Image">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                                    </svg>
                                </button>
                            <% } %>
                        </div>
                    </div>

                    <!-- Name Field -->
                    <div class="profile-field-group">
                        <label for="name" class="form-label profile-label">NAME</label>
                        <div class="profile-value-container">
                            <div class="profile-value" id="nameValue">
                                <%= userData.name %>
                            </div>
                            <button class="edit-btn" data-field="name" title="Edit Name">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Email Field -->
                    <div class="profile-field-group">
                        <label for="email" class="form-label profile-label">EMAIL</label>
                        <div class="profile-value-container">
                            <div class="profile-value" id="emailValue">
                                <%= userData.email %>
                            </div>
                            <button class="edit-btn" data-field="email" title="Edit Email">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Phone Field -->
                    <div class="profile-field-group">
                        <label for="phone" class="form-label profile-label">PHONE NUMBER</label>
                        <div class="profile-value-container">
                            <div class="profile-value" id="phoneValue">
                                <%= userData.phone || 'Not Set' %>
                            </div>
                            <button class="edit-btn" data-field="phone" title="Edit Phone">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Password Field -->
                    <div class="profile-field-group">
                        <label for="password" class="form-label profile-label">PASSWORD</label>
                        <div class="profile-value-container">
                            <div class="profile-value" id="passwordValue">* * * * * * * *</div>
                            <button class="edit-btn" data-field="password" title="Change Password">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="profile-actions">
                        <button class="btn btn-custom" id="saveChangesBtn" style="display: none;">Save Changes</button>
                        <button class="btn btn-secondary" id="cancelChangesBtn" style="display: none;">Cancel</button>
                    </div>
                </div>

                <!-- Password Update Modal -->
                <div class="password-modal" id="passwordModal">
                    <div class="password-modal-content">
                        <div class="modal-header">
                            <h3>Update Password</h3>
                            <button class="modal-close" id="closePasswordModal">&times;</button>
                        </div>

                        <div class="modal-body">
                            <div class="password-input-group">
                                <label for="currentPassword" class="form-label">Current Password</label>
                                <input type="password" class="form-control" id="currentPassword" placeholder="Enter current password" name="CurrentPassword">
                                <div class="error-message" id="currentPasswordError"></div>
                            </div>

                            <div class="password-input-group">
                                <label for="newPassword" class="form-label">New Password</label>
                                <input type="password" class="form-control" id="newPassword" placeholder="Enter new password" name="NewPassword">
                                <div class="error-message" id="newPasswordError"></div>
                                <div class="password-requirements">
                                    <small>Password must contain at least 8 characters, including uppercase, lowercase, number, and special character</small>
                                </div>
                            </div>

                            <div class="password-input-group">
                                <label for="confirmPassword" class="form-label">Confirm New Password</label>
                                <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm new password" name="ConfirmNewPassword">
                                <div class="error-message" id="confirmPasswordError"></div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button class="btn btn-custom" id="updatePasswordBtn">Update Password</button>
                            <button class="btn btn-secondary" id="cancelPasswordBtn">Cancel</button>
                        </div>
                    </div>
                </div>

                <!-- Profile Image Modal -->
                <div class="password-modal" id="profileImageModal">
                    <div class="password-modal-content">
                        <div class="modal-header">
                            <h3>Update Profile Image</h3>
                            <button class="modal-close" id="closeProfileImageModal">&times;</button>
                        </div>

                        <div class="modal-body">
                            <div class="password-input-group">
                                <label for="profileImageInput" class="form-label">Select Profile Image</label>
                                <input type="file" class="form-control" id="profileImageInput" accept="image/jpeg,image/png,image/jpg,image/gif">
                                <div class="error-message" id="profileImageError"></div>
                                <div class="image-requirements">
                                    <small>Image must be JPEG, PNG, JPG, or GIF, and less than 5MB</small>
                                </div>
                            </div>
                            <div class="image-preview" id="imagePreview" style="display: none; margin-top: 1rem;">
                                <img id="previewImage" style="max-width: 150px; max-height: 150px; border-radius: 8px; object-fit: cover;">
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button class="btn btn-custom" id="updateProfileImageBtn">Update Image</button>
                            <button class="btn btn-secondary" id="cancelProfileImageBtn">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Existing styles remain unchanged, adding profile image-specific styles */
.profile-image {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #e9ecef;
}

.remove-image-btn {
    background: #dc3545;
    border: none;
    border-radius: 50%;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0.7;
}

.remove-image-btn:hover {
    opacity: 1;
    transform: scale(1.1);
    background: #c82333;
}

.image-requirements {
    margin-top: 0.5rem;
}

.image-requirements small {
    color: #666;
    font-size: 0.85rem;
}
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const editButtons = document.querySelectorAll('.edit-btn');
    const passwordModal = document.getElementById('passwordModal');
    const profileImageModal = document.getElementById('profileImageModal');
    const cancelPasswordBtn = document.getElementById('cancelPasswordBtn');
    const updatePasswordBtn = document.getElementById('updatePasswordBtn');
    const closePasswordModal = document.getElementById('closePasswordModal');
    const cancelProfileImageBtn = document.getElementById('cancelProfileImageBtn');
    const updateProfileImageBtn = document.getElementById('updateProfileImageBtn');
    const closeProfileImageModal = document.getElementById('closeProfileImageModal');
    const saveChangesBtn = document.getElementById('saveChangesBtn');
    const cancelChangesBtn = document.getElementById('cancelChangesBtn');
    const removeImageButtons = document.querySelectorAll('.remove-image-btn');

    const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    const phonePattern = /^\d{10}$/;
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    let hasChanges = false;
    let originalValues = {};

    // Store original values
    ['name', 'email', 'phone', 'profileImage'].forEach(field => {
        const element = document.getElementById(`${field}Value`);
        originalValues[field] = element ? element.textContent.trim() : '<%= userData.profileImage || "No Profile Image Set" %>';
    });

    function showActionButtons() {
        if (!hasChanges) {
            saveChangesBtn.style.display = 'inline-flex';
            cancelChangesBtn.style.display = 'inline-flex';
            hasChanges = true;
        }
    }

    function hideActionButtons() {
        saveChangesBtn.style.display = 'none';
        cancelChangesBtn.style.display = 'none';
        hasChanges = false;
    }

    editButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            const field = e.currentTarget.dataset.field;

            if (field === 'password') {
                passwordModal.classList.add('show');
                return;
            }

            if (field === 'profileImage') {
                profileImageModal.classList.add('show');
                return;
            }

            const valueElement = document.getElementById(`${field}Value`);
            if (valueElement.tagName === 'INPUT') return;

            const currentValue = valueElement.textContent.trim();
            const inputValue = currentValue === 'Not Set' ? '' : currentValue;

            valueElement.outerHTML = `
                <input 
                    type="${field === 'phone' ? 'tel' : field === 'email' ? 'email' : 'text'}"
                    class="profile-input" 
                    id="${field}Value" 
                    value="${inputValue}"
                    ${field === 'phone' ? 'pattern="[0-9]{10}"' : ''}
                    ${field === 'phone' ? 'maxlength="10"' : 'maxlength="50"'}
                    placeholder="Enter ${field}"
                />
            `;

            const inputElement = document.getElementById(`${field}Value`);
            inputElement.focus();
            inputElement.select();

            inputElement.addEventListener('blur', () => saveEdit(field));
            inputElement.addEventListener('keypress', (event) => {
                if (event.key === 'Enter') {
                    inputElement.blur();
                }
            });

            inputElement.addEventListener('input', () => {
                if (inputElement.value.trim() !== originalValues[field]) {
                    showActionButtons();
                }
            });
        });
    });

    function saveEdit(field) {
        const inputElement = document.getElementById(`${field}Value`);
        const newValue = inputElement.value.trim();

        if (validateInput(field, newValue)) {
            const displayValue = (field === 'phone' && !newValue) ? 'Not Set' : newValue;
            
            inputElement.outerHTML = `
                <div class="profile-value" id="${field}Value">${displayValue}</div>
            `;

            if (newValue !== originalValues[field]) {
                showActionButtons();
            }
        } else {
            inputElement.outerHTML = `
                <div class="profile-value" id="${field}Value">${originalValues[field]}</div>
            `;
        }
    }

    function validateInput(field, value) {
        switch (field) {
            case 'name':
                if (value.length < 2) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Name',
                        text: 'Name must be at least 2 characters long'
                    });
                    return false;
                }
                if (!/^[a-zA-Z\s]+$/.test(value)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Name',
                        text: 'Name can only contain letters and spaces'
                    });
                    return false;
                }
                return true;

            case 'email':
                if (!emailPattern.test(value)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Email',
                        text: 'Please enter a valid email address'
                    });
                    return false;
                }
                return true;

            case 'phone':
                if (value === '') return true;
                if (!phonePattern.test(value)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Phone',
                        text: 'Please enter a valid 10-digit phone number'
                    });
                    return false;
                }
                return true;

            default:
                return true;
        }
    }

    // Profile Image Preview
    const profileImageInput = document.getElementById('profileImageInput');
    profileImageInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (event) => {
                const previewImage = document.getElementById('previewImage');
                previewImage.src = event.target.result;
                document.getElementById('imagePreview').style.display = 'block';
            };
            reader.readAsDataURL(file);
        } else {
            document.getElementById('imagePreview').style.display = 'none';
        }
    });

    // Profile Image Modal Handlers
    function closeProfileImageModalHandler() {
        profileImageModal.classList.remove('show');
        document.getElementById('profileImageInput').value = '';
        document.getElementById('imagePreview').style.display = 'none';
        document.getElementById('profileImageError').style.display = 'none';
    }

    closeProfileImageModal.addEventListener('click', closeProfileImageModalHandler);
    cancelProfileImageBtn.addEventListener('click', closeProfileImageModalHandler);

    profileImageModal.addEventListener('click', (e) => {
        if (e.target === profileImageModal) {
            closeProfileImageModalHandler();
        }
    });

    updateProfileImageBtn.addEventListener('click', () => {
        const profileImageInput = document.getElementById('profileImageInput');
        if (!profileImageInput.files[0]) {
            document.getElementById('profileImageError').textContent = 'Please select an image';
            document.getElementById('profileImageError').style.display = 'block';
            return;
        }

        const formData = new FormData();
        formData.append('profileImage', profileImageInput.files[0]);

        Swal.fire({
            title: 'Uploading Image...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        fetch('/profile/update-profile-image', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                closeProfileImageModalHandler();
                // Update the profile image display
                const profileImageContainer = document.querySelector('.profile-value-container[data-field="profileImage"]') || 
                    document.querySelector('#profileImageValue').parentElement;
                profileImageContainer.innerHTML = `
                    <img src="/uploads/profile-images/${data.profileImage}" alt="Profile Image" class="profile-image" style="width: 100px; height: 100px; border-radius: 50%; object-fit: cover;">
                    <button class="edit-btn" data-field="profileImage" title="Change Profile Image">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                        </svg>
                    </button>
                    <button class="remove-image-btn" data-field="profileImage" title="Remove Profile Image">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                `;
                originalValues.profileImage = data.profileImage;
                showActionButtons();

                // Re-attach event listeners for new buttons
                attachRemoveImageListener();

                Swal.fire({
                    icon: 'success',
                    title: 'Image Updated!',
                    text: 'Your profile image has been updated successfully',
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: data.message || 'Failed to update profile image'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'An error occurred while updating profile image'
            });
        });
    });

    // Remove Profile Image Handler
    function attachRemoveImageListener() {
        document.querySelectorAll('.remove-image-btn').forEach(button => {
            button.addEventListener('click', () => {
                Swal.fire({
                    title: 'Remove Profile Image?',
                    text: 'Are you sure you want to remove your profile image?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, remove',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/profile/remove-profile-image', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const profileImageContainer = document.querySelector('.profile-value-container[data-field="profileImage"]') || 
                                    document.querySelector('#profileImageValue').parentElement;
                                profileImageContainer.innerHTML = `
                                    <div class="profile-value" id="profileImageValue">No Profile Image Set</div>
                                    <button class="edit-btn" data-field="profileImage" title="Add Profile Image">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                                        </svg>
                                    </button>
                                `;
                                originalValues.profileImage = 'No Profile Image Set';
                                showActionButtons();

                                Swal.fire({
                                    icon: 'success',
                                    title: 'Image Removed!',
                                    text: 'Your profile image has been removed successfully',
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error!',
                                    text: data.message || 'Failed to remove profile image'
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: 'An error occurred while removing profile image'
                            });
                        });
                    }
                });
            });
        });
    }

    // Initialize remove image button listeners
    attachRemoveImageListener();

    // Save Changes Button Handler
    saveChangesBtn.addEventListener('click', () => {
        const updatedName = document.getElementById('nameValue').textContent.trim();
        const updatedEmail = document.getElementById('emailValue').textContent.trim();
        const updatedPhone = document.getElementById('phoneValue').textContent.trim();

        const updateData = {};
        let hasRealChanges = false;

        if (updatedName !== originalValues.name) {
            updateData.name = updatedName;
            hasRealChanges = true;
        }
        if (updatedEmail !== originalValues.email) {
            updateData.email = updatedEmail;
            hasRealChanges = true;
        }
        if (updatedPhone !== originalValues.phone) {
            updateData.phone = updatedPhone === 'Not Set' ? '' : updatedPhone;
            hasRealChanges = true;
        }

        if (!hasRealChanges) {
            Swal.fire({
                icon: 'info',
                title: 'No Changes',
                text: 'No changes were made to save'
            });
            return;
        }

        // Show loading
        Swal.fire({
            title: 'Saving Changes...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        fetch('/profile/profile', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateData),
        })
        .then(response => response.json())
        .then(data => {
            if (data.message === 'Profile updated successfully') {
                // Update original values
                originalValues.name = data.user.name || updatedName;
                originalValues.email = data.user.email || updatedEmail;
                originalValues.phone = data.user.phone || updatedPhone;

                hideActionButtons();

                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Profile updated successfully',
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: data.message || 'Failed to update profile'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'An error occurred while updating profile'
            });
        });
    });

    // Cancel Changes Button Handler
    cancelChangesBtn.addEventListener('click', () => {
        Swal.fire({
            title: 'Discard Changes?',
            text: 'Are you sure you want to discard all unsaved changes?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, discard',
            cancelButtonText: 'Keep editing'
        }).then((result) => {
            if (result.isConfirmed) {
                // Reset all values to original
                document.getElementById('nameValue').textContent = originalValues.name;
                document.getElementById('emailValue').textContent = originalValues.email;
                document.getElementById('phoneValue').textContent = originalValues.phone;
                
                hideActionButtons();
                
                Swal.fire({
                    icon: 'info',
                    title: 'Changes Discarded',
                    text: 'All changes have been discarded',
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        });
    });

    // Password Modal Handlers
    function closePasswordModalHandler() {
        passwordModal.classList.remove('show');
        ['currentPassword', 'newPassword', 'confirmPassword'].forEach(id => {
            document.getElementById(id).value = '';
            document.getElementById(`${id}Error`).style.display = 'none';
        });
    }

    closePasswordModal.addEventListener('click', closePasswordModalHandler);
    cancelPasswordBtn.addEventListener('click', closePasswordModalHandler);

    passwordModal.addEventListener('click', (e) => {
        if (e.target === passwordModal) {
            closePasswordModalHandler();
        }
    });

    updatePasswordBtn.addEventListener('click', () => {
        const currentPassword = document.getElementById('currentPassword');
        const newPassword = document.getElementById('newPassword');
        const confirmPassword = document.getElementById('confirmPassword');

        // Clear previous errors
        ['currentPassword', 'newPassword', 'confirmPassword'].forEach(id => {
            document.getElementById(`${id}Error`).style.display = 'none';
        });

        let hasError = false;

        if (!currentPassword.value.trim()) {
            document.getElementById('currentPasswordError').textContent = 'Current password is required';
            document.getElementById('currentPasswordError').style.display = 'block';
            hasError = true;
        }

        if (!passwordPattern.test(newPassword.value)) {
            document.getElementById('newPasswordError').textContent = 'Password must contain at least 8 characters, including uppercase, lowercase, number, and special character';
            document.getElementById('newPasswordError').style.display = 'block';
            hasError = true;
        }

        if (newPassword.value !== confirmPassword.value) {
            document.getElementById('confirmPasswordError').textContent = 'Passwords do not match';
            document.getElementById('confirmPasswordError').style.display = 'block';
            hasError = true;
        }

        if (hasError) return;

        // Show loading
        Swal.fire({
            title: 'Updating Password...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        fetch('/profile/profile', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                currentPassword: currentPassword.value,
                newPassword: newPassword.value,
                confirmNewPassword: confirmPassword.value
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.message === "Password updated successfully") {
                closePasswordModalHandler();
                
                Swal.fire({
                    icon: 'success',
                    title: 'Password Updated!',
                    text: 'Your password has been updated successfully',
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                Swal.close();
                document.getElementById('currentPasswordError').textContent = data.message;
                document.getElementById('currentPasswordError').style.display = 'block';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'An error occurred while updating password'
            });
        });
    });
});
</script>