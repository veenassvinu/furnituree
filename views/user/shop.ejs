<!doctype html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta name="author" content="Untree.co">
	<link rel="shortcut icon" href="/public/images/favicon.png">

	<meta name="description" content="" />
	<meta name="keywords" content="bootstrap, bootstrap4" />

	<!-- Bootstrap CSS -->
	<link href="/css/bootstrap.min.css" rel="stylesheet">
	<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" integrity="sha512-Fo3rlrZj/k7ujTnHg4CGR2D7kSs0v4LLanw2qksYuRlEzO+tcaEPQogQ0KaoGN26/zrn20ImR1DfuLWnOo7aBA==" crossorigin="anonymous" referrerpolicy="no-referrer">
	<link href="/css/tiny-slider.css" rel="stylesheet">
	<link href="/css/style.css" rel="stylesheet">

	<title>Furniture Free Bootstrap 5 Template for Furniture and Interior Design Websites by Untree.co</title>

	<style>
		.filter-sidebar {
			background-color: #f8f9fa;
			padding: 20px;
			border-radius: 8px;
			margin-bottom: 20px;
		}

		.filter-section {
			margin-bottom: 25px;
		}

		.filter-section h5 {
			color: #3b5d50;
			font-weight: 600;
			margin-bottom: 15px;
			border-bottom: 2px solid #3b5d50;
			padding-bottom: 8px;
		}

		/* Price Range Styling */
		.price-range-container {
			padding: 15px 0;
		}

		.range-slider {
			position: relative;
			height: 20px;
			margin: 20px 10px;
		}

		.range-slider input[type="range"] {
			-webkit-appearance: none;
			appearance: none;
			width: 100%;
			height: 8px;
			background: #e0e0e0;
			border-radius: 4px;
			outline: none;
			position: absolute;
			top: 0;
			pointer-events: none;
		}

		/* Style the track */
		.range-slider input[type="range"]::-webkit-slider-runnable-track {
			height: 8px;
			border-radius: 4px;
		}

		.range-slider input[type="range"]::-moz-range-track {
			height: 8px;
			border-radius: 4px;
			background: #e0e0e0;
		}

		/* Style the thumb */
		.range-slider input[type="range"]::-webkit-slider-thumb {
			-webkit-appearance: none;
			appearance: none;
			width: 16px;
			height: 16px;
			background: #3b5d50;
			border-radius: 50%;
			cursor: pointer;
			margin-top: -4px;
			pointer-events: auto;
			box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
		}

		.range-slider input[type="range"]::-moz-range-thumb {
			width: 16px;
			height: 16px;
			background: #3b5d50;
			border-radius: 50%;
			cursor: pointer;
			pointer-events: auto;
			box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
		}

		/* Create the colored track between min and max */
		.range-track {
			position: absolute;
			height: 8px;
			background: #3b5d50;
			border-radius: 4px;
			z-index: 1;
			pointer-events: none;
		}

		.price-display {
			display: flex;
			justify-content: space-between;
			margin-top: 10px;
			font-size: 14px;
			color: #333;
		}

		.price-inputs {
			display: flex;
			gap: 10px;
			margin-top: 10px;
		}

		.price-inputs input {
			flex: 1;
			padding: 8px;
			border: 1px solid #ddd;
			border-radius: 4px;
		}

		/* Show fallback inputs if range inputs are unsupported */
		.price-inputs.fallback {
			display: block;
		}

		/* Hide range slider if fallback is used */
		.range-slider.fallback {
			display: none;
		}

		.filter-checkbox {
			margin-bottom: 8px;
		}

		.filter-checkbox input[type="radio"] {
			margin-right: 8px;
		}

		.search-container {
			margin-bottom: 30px;
		}

		.search-input {
			border: 2px solid #3b5d50;
			border-radius: 25px;
			padding: 12px 20px;
			font-size: 16px;
		}

		.search-input:focus {
			outline: none;
			box-shadow: 0 0 0 0.2rem rgba(59, 93, 80, 0.25);
		}

		.search-btn {
			background-color: #3b5d50;
			border: none;
			border-radius: 25px;
			padding: 12px 25px;
			color: white;
			font-weight: 600;
		}

		.search-btn:hover {
			background-color: #2d4a3e;
		}

		.filter-buttons {
			display: flex;
			gap: 10px;
			margin-top: 20px;
		}

		.apply-filters-btn {
			background-color: #3b5d50;
			color: white;
			border: none;
			padding: 10px 20px;
			border-radius: 5px;
			font-weight: 600;
		}

		.apply-filters-btn:hover {
			background-color: #2d4a3e;
		}

		.clear-filters-btn {
			background-color: #6c757d;
			color: white;
			border: none;
			padding: 10px 20px;
			border-radius: 5px;
		}

		.clear-filters-btn:hover {
			background-color: #545b62;
		}

		.sort-container {
			margin-bottom: 20px;
		}

		.sort-select {
			padding: 8px 12px;
			border: 1px solid #ddd;
			border-radius: 4px;
			background-color: white;
		}

		.results-count {
			color: #666;
			font-size: 14px;
			margin-bottom: 15px;
		}

		.mobile-filter-toggle {
			display: none;
			margin-bottom: 20px;
		}

		.loading-overlay {
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: rgba(255, 255, 255, 0.8);
			display: none;
			align-items: center;
			justify-content: center;
			z-index: 1000;
		}

		.products-container {
			position: relative;
			min-height: 400px;
		}

		@media (max-width: 768px) {
			.mobile-filter-toggle {
				display: block;
			}

			.filter-sidebar {
				display: none;
			}

			.filter-sidebar.show {
				display: block;
			}
		}
	</style>
</head>

<body>
	<!-- Start Header/Navigation -->
	<%- include("../../views/partials/user/navBar.ejs") %>

	<!-- End Header/Navigation -->

	<!-- Start Hero Section -->
	<div class="hero">
		<div class="container">
			<div class="row justify-content-between">
				<div class="col-lg-5">
					<div class="intro-excerpt">
						<h1>Shop</h1>
					</div>
				</div>
				<div class="col-lg-7">
					<!-- Search Bar in Hero Section -->
					<div class="search-container">
						<form id="searchForm" class="d-flex">
							<input type="text" name="search" id="searchInput" class="form-control search-input me-2"
								placeholder="Search for furniture..."
								value="<%= typeof search !== 'undefined' ? search : '' %>">
							<button type="submit" class="btn search-btn">
								<i class="fas fa-search"></i>
							</button>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!-- End Hero Section -->

	<div class="untree_co-section product-section before-footer-section">
		<div class="container">
			<div class="row">
				<!-- Mobile Filter Toggle -->
				<div class="col-12">
					<button class="btn btn-outline-primary mobile-filter-toggle" onclick="toggleMobileFilters()">
						<i class="fas fa-filter"></i> Filters
					</button>
				</div>

				<!-- Filter Sidebar -->
				<div class="col-lg-3 col-md-4">
					<div class="filter-sidebar" id="filterSidebar">
						<form id="filterForm" method="GET" action="/shop">
							<!-- Category Filter -->
							<div class="filter-section">
								<h5><i class="fas fa-list"></i> Category</h5>
								<% if (categories && categories.length > 0) { %>
									<div class="filter-checkbox">
										<input type="radio" name="category" value="" id="cat_all" <%= !category ? 'checked' : '' %>>
										<label for="cat_all">All</label>
									</div>
									<% categories.forEach(cat => { %>
										<div class="filter-checkbox">
											<input type="radio" name="category" value="<%= cat.name %>"
												id="cat_<%= cat._id %>" <%= category === cat.name ? 'checked' : '' %>>
											<label for="cat_<%= cat._id %>">
												<%= cat.name %>
											</label>
										</div>
									<% }) %>
								<% } else { %>
									<p>No categories available</p>
								<% } %>
							</div>

							<!-- Price Range Filter -->
							<div class="filter-section">
								<h5><i class="fas fa-dollar-sign"></i> Price Range</h5>
								<div class="price-range-container">
									<div class="range-slider">
										<div class="range-track" id="rangeTrack"></div>
										<input type="range" id="minPriceRange" min="0" max="5000" step="10" value="<%= minPrice || 0 %>">
										<input type="range" id="maxPriceRange" min="0" max="5000" step="10" value="<%= maxPrice || 5000 %>">
									</div>
									<div class="price-display">
										<span id="minPriceDisplay">₹<%= minPrice || 0 %></span>
										<span id="maxPriceDisplay">₹<%= maxPrice || 5000 %></span>
									</div>
									<!-- Fallback number inputs -->
									<div class="price-inputs fallback" style="display: none;">
										<input type="number" name="minPrice" id="minPriceInput" placeholder="Min" value="<%= minPrice || '' %>">
										<input type="number" name="maxPrice" id="maxPriceInput" placeholder="Max" value="<%= maxPrice || '' %>">
									</div>
									<!-- Hidden inputs for form submission -->
									<input type="hidden" name="minPrice" id="minPrice" value="<%= minPrice || '' %>">
									<input type="hidden" name="maxPrice" id="maxPrice" value="<%= maxPrice || '' %>">
								</div>
							</div>

							<!-- Filter Buttons -->
							<div class="filter-buttons">
								<button type="submit" class="apply-filters-btn">
									<i class="fas fa-filter"></i> Apply Filters
								</button>
								<button type="button" class="clear-filters-btn" onclick="clearFilters()">
									<i class="fas fa-times"></i> Clear
								</button>
							</div>
						</form>
					</div>
				</div>

				<!-- Products Section -->
				<div class="col-lg-9 col-md-8">
					<!-- Sort and Results Info -->
					<div class="d-flex justify-content-between align-items-center mb-4">
						<div class="results-count" id="resultsCount">
							<% if (typeof product !== 'undefined') { %>
								Showing <%= product.length %> products
							<% } %>
						</div>
						<div class="sort-container">
							<select class="sort-select" id="sortSelect">
								<option value="">Sort by</option>
								<option value="name-asc" <%= sort === 'name-asc' ? 'selected' : '' %>>Name (A-Z)</option>
								<option value="name-desc" <%= sort === 'name-desc' ? 'selected' : '' %>>Name (Z-A)</option>
								<option value="price-asc" <%= sort === 'price-asc' ? 'selected' : '' %>>Price (Low to High)</option>
								<option value="price-desc" <%= sort === 'price-desc' ? 'selected' : '' %>>Price (High to Low)</option>
								<option value="newest" <%= sort === 'newest' ? 'selected' : '' %>>Newest First</option>
							</select>
						</div>
					</div>

					<!-- Products Grid -->
					<div class="products-container">
						<div class="loading-overlay" id="loadingOverlay">
							<div class="spinner-border text-primary" role="status">
								<span class="visually-hidden">Loading...</span>
							</div>
						</div>

						<div class="row" id="productsGrid">
							<% if (typeof product !== 'undefined' && product.length > 0) { %>
								<% for(let i = 0; i < product.length; i++) { %>
									<div class="col-12 col-md-6 col-lg-4 mb-5">
										<a class="product-item" href="/productDetails/<%= product[i]._id %>">
											<img src="/Uploads/product-images/<%= product[i].productImages[0] %>"
												class="img-fluid product-thumbnail">
											<h3 class="product-title">
												<%= product[i].productName %>
											</h3>
											<strong class="product-price">₹<%= product[i].salePrice %></strong>
											<span class="icon-cross">
												<img src="images/cross.svg" class="img-fluid">
											</span>
										</a>
									</div>
								<% } %>
							<% } else { %>
								<div class="col-12 text-center">
									<div class="alert alert-info">
										<i class="fas fa-info-circle"></i> No products found matching your criteria.
									</div>
								</div>
							<% } %>
						</div>
					</div>

					<!-- Pagination Section -->
					<div id="paginationContainer">
						<% if (typeof totalPages !== 'undefined' && totalPages > 1) { %>
							<div class="pagination d-flex justify-content-center mt-4">
								<!-- Previous Button -->
								<button class="pagination-button btn btn-secondary me-2"
									onclick="changePage('<%= currentPage - 1 %>')" <%= currentPage === 1 ? 'disabled' : '' %>>Previous</button>

								<!-- Page Numbers -->
								<% for (let page = 1; page <= totalPages; page++) { %>
									<button
										class="pagination-button btn <%= currentPage === page ? 'btn-primary' : 'btn-outline-primary' %> mx-1"
										onclick="changePage('<%= page %>')">
										<%= page %>
									</button>
								<% } %>

								<!-- Next Button -->
								<button class="pagination-button btn btn-secondary ms-2"
									onclick="changePage('<%= currentPage + 1 %>')"
									<%= currentPage === totalPages ? 'disabled' : '' %>>Next</button>
							</div>
						<% } %>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Start Footer Section -->
	<%- include("../../views/partials/user/footer") %>
	<!-- End Footer Section -->

	<script src="/js/bootstrap.bundle.min.js"></script>
	<script src="/js/tiny-slider.js"></script>
	<script src="/js/custom.js"></script>

	<script>
		let currentPage = 1;
		let sliderInitialized = false;

		// Initialize price range slider with native range inputs
		function initializePriceSlider() {
			const rangeSliderContainer = document.querySelector('.range-slider');
			const minPriceRange = document.getElementById('minPriceRange');
			const maxPriceRange = document.getElementById('maxPriceRange');
			const rangeTrack = document.getElementById('rangeTrack');
			const minPriceInput = document.getElementById('minPrice');
			const maxPriceInput = document.getElementById('maxPrice');
			const minPriceDisplay = document.getElementById('minPriceDisplay');
			const maxPriceDisplay = document.getElementById('maxPriceDisplay');
			const fallbackInputs = document.querySelector('.price-inputs.fallback');

			// Check if all required elements exist
			if (!rangeSliderContainer || !minPriceRange || !maxPriceRange || !rangeTrack || !minPriceInput || !maxPriceInput || !minPriceDisplay || !maxPriceDisplay || !fallbackInputs) {
				console.error('One or more range slider elements not found:', {
					rangeSliderContainer: !!rangeSliderContainer,
					minPriceRange: !!minPriceRange,
					maxPriceRange: !!maxPriceRange,
					rangeTrack: !!rangeTrack,
					minPriceInput: !!minPriceInput,
					maxPriceInput: !!maxPriceInput,
					minPriceDisplay: !!minPriceDisplay,
					maxPriceDisplay: !!maxPriceDisplay,
					fallbackInputs: !!fallbackInputs
				});
				fallbackInputs.style.display = 'flex';
				rangeSliderContainer.classList.add('fallback');
				return;
			}

			// Check if range inputs are supported
			const testInput = document.createElement('input');
			testInput.type = 'range';
			const supportsRange = testInput.type === 'range';
			if (!supportsRange) {
				console.warn('Range inputs not supported. Using fallback inputs.');
				fallbackInputs.style.display = 'flex';
				rangeSliderContainer.classList.add('fallback');
				return;
			}

			// Initialize values
			let minValue = parseInt(minPriceRange.value) || 0;
			let maxValue = parseInt(maxPriceRange.value) || 5000;

			// Update track position
			function updateRangeTrack() {
				const minPercent = (minValue / 5000) * 100;
				const maxPercent = (maxValue / 5000) * 100;
				rangeTrack.style.left = `${minPercent}%`;
				rangeTrack.style.width = `${maxPercent - minPercent}%`;
			}

			// Update inputs and display
			function updatePriceInputs() {
				minPriceInput.value = minValue;
				maxPriceInput.value = maxValue;
				minPriceDisplay.textContent = `$${minValue}`;
				maxPriceDisplay.textContent = `$${maxValue}`;
				updateRangeTrack();
			}

			// Event listeners for range inputs
			minPriceRange.addEventListener('input', () => {
				minValue = parseInt(minPriceRange.value);
				if (minValue > maxValue - 10) {
					minValue = maxValue - 10;
					minPriceRange.value = minValue;
				}
				updatePriceInputs();
			});

			maxPriceRange.addEventListener('input', () => {
				maxValue = parseInt(maxPriceRange.value);
				if (maxValue < minValue + 10) {
					maxValue = minValue + 10;
					maxPriceRange.value = maxValue;
				}
				updatePriceInputs();
			});

			// Initial setup
			try {
				updatePriceInputs();
				rangeSliderContainer.style.display = 'block';
				fallbackInputs.style.display = 'none';
				sliderInitialized = true;
				console.log('Price slider initialized successfully.');
			} catch (error) {
				console.error('Error during price slider initialization:', error);
				fallbackInputs.style.display = 'flex';
				rangeSliderContainer.classList.add('fallback');
			}
		}

		// Show loading overlay
		function showLoading() {
			const loadingOverlay = document.getElementById('loadingOverlay');
			if (loadingOverlay) {
				loadingOverlay.style.display = 'flex';
			}
		}

		// Hide loading overlay
		function hideLoading() {
			const loadingOverlay = document.getElementById('loadingOverlay');
			if (loadingOverlay) {
				loadingOverlay.style.display = 'none';
			}
		}

		// Get all form data
		function getFormData() {
			const formData = {
				search: document.getElementById('searchInput')?.value || '',
				sort: document.getElementById('sortSelect')?.value || '',
				page: currentPage
			};

			// Use fallback inputs if slider isn't initialized
			if (!sliderInitialized) {
				formData.minPrice = document.getElementById('minPriceInput')?.value || '';
				formData.maxPrice = document.getElementById('maxPriceInput')?.value || '';
			} else {
				formData.minPrice = document.getElementById('minPrice')?.value || '';
				formData.maxPrice = document.getElementById('maxPrice')?.value || '';
			}

			// Get checked category
			const categoryRadio = document.querySelector('input[name="category"]:checked');
			if (categoryRadio && categoryRadio.value) {
				formData.category = categoryRadio.value;
			}

			return formData;
		}

		// Apply filters with AJAX
		async function applyFilters(resetPage = true) {
			if (resetPage) {
				currentPage = 1;
			}

			showLoading();

			try {
				const formData = getFormData();
				const params = new URLSearchParams();

				// Add all form data to params
				Object.keys(formData).forEach(key => {
					if (formData[key]) {
						params.append(key, formData[key]);
					}
				});

				const response = await fetch(`/shop?${params.toString()}`, {
					headers: {
						'Accept': 'application/json',
						'X-Requested-With': 'XMLHttpRequest'
					}
				});

				if (!response.ok) {
					throw new Error(`Network response was not ok: ${response.status}`);
				}

				const data = await response.json();
				updateProductGrid(data.products, data.totalPages, data.currentPage);
				updateResultsCount(data.products.length);
			} catch (error) {
				console.error('Error applying filters:', error);
				const formData = getFormData();
				const params = new URLSearchParams();
				Object.keys(formData).forEach(key => {
					if (formData[key]) {
						params.append(key, formData[key]);
					}
				});
				window.location.href = `/shop?${params.toString()}`;
			} finally {
				hideLoading();
			}
		}

		// Update product grid
		function updateProductGrid(products, totalPages, currentPageNum) {
			const container = document.getElementById('productsGrid');
			if (!container) {
				console.error('Products grid container not found.');
				return;
			}
			currentPage = currentPageNum;

			let html = "";
			if (products.length === 0) {
				html = `
				<div class="col-12 text-center">
					<div class="alert alert-info">
						<i class="fas fa-info-circle"></i> No products found matching your criteria.
					</div>
				</div>`;
			} else {
				for (let p of products) {
					html += `
					<div class="col-12 col-md-6 col-lg-4 mb-5">
						<a class="product-item" href="/productDetails/${p._id}">
							<img src="/Uploads/product-images/${p.productImages[0]}" class="img-fluid product-thumbnail">
							<h3 class="product-title">${p.productName}</h3>
							<strong class="product-price">$${p.salePrice}</strong>
							<span class="icon-cross">
								<img src="images/cross.svg" class="img-fluid">
							</span>
						</a>
					</div>`;
				}
			}

			container.innerHTML = html;
			updatePagination(totalPages, currentPageNum);
		}

		// Update pagination
		function updatePagination(totalPages, currentPageNum) {
			const paginationContainer = document.getElementById('paginationContainer');
			if (!paginationContainer) {
				console.error('Pagination container not found.');
				return;
			}

			if (totalPages <= 1) {
				paginationContainer.innerHTML = '';
				return;
			}

			let html = '<div class="pagination d-flex justify-content-center mt-4">';

			html += `<button class="pagination-button btn btn-secondary me-2" 
				onclick="changePage(${currentPageNum - 1})" 
				${currentPageNum === 1 ? 'disabled' : ''}>Previous</button>`;

			for (let page = 1; page <= totalPages; page++) {
				html += `<button class="pagination-button btn ${currentPageNum === page ? 'btn-primary' : 'btn-outline-primary'} mx-1" 
					onclick="changePage(${page})">${page}</button>`;
			}

			html += `<button class="pagination-button btn btn-secondary ms-2" 
				onclick="changePage(${currentPageNum + 1})" 
				${currentPageNum === totalPages ? 'disabled' : ''}>Next</button>`;

			html += '</div>';
			paginationContainer.innerHTML = html;
		}

		// Update results count
		function updateResultsCount(count) {
			const resultsCount = document.getElementById('resultsCount');
			if (resultsCount) {
				resultsCount.textContent = `Showing ${count} products`;
			}
		}

		// Change page
		function changePage(page) {
			if (page < 1) return;
			currentPage = page;
			applyFilters(false);
		}

		// Clear filters
		function clearFilters() {
			// Clear search
			const searchInput = document.getElementById('searchInput');
			if (searchInput) searchInput.value = '';

			// Clear category
			const catAll = document.getElementById('cat_all');
			if (catAll) catAll.checked = true;

			// Reset price inputs
			if (sliderInitialized) {
				const minPriceRange = document.getElementById('minPriceRange');
				const maxPriceRange = document.getElementById('maxPriceRange');
				if (minPriceRange && maxPriceRange) {
					minPriceRange.value = 0;
					maxPriceRange.value = 5000;
					const event = new Event('input');
					minPriceRange.dispatchEvent(event);
					maxPriceRange.dispatchEvent(event);
				}
				const minPriceInput = document.getElementById('minPrice');
				const maxPriceInput = document.getElementById('maxPrice');
				if (minPriceInput && maxPriceInput) {
					minPriceInput.value = '';
					maxPriceInput.value = '';
				}
			} else {
				const minPriceInput = document.getElementById('minPriceInput');
				const maxPriceInput = document.getElementById('maxPriceInput');
				const minPrice = document.getElementById('minPrice');
				const maxPrice = document.getElementById('maxPrice');
				const minPriceDisplay = document.getElementById('minPriceDisplay');
				const maxPriceDisplay = document.getElementById('maxPriceDisplay');
				if (minPriceInput) minPriceInput.value = '';
				if (maxPriceInput) maxPriceInput.value = '';
				if (minPrice) minPrice.value = '';
				if (maxPrice) maxPrice.value = '';
				if (minPriceDisplay) minPriceDisplay.textContent = '$0';
				if (maxPriceDisplay) maxPriceDisplay.textContent = '$5000';
			}

			// Apply filters
			applyFilters();
		}

		// Toggle mobile filters
		function toggleMobileFilters() {
			const sidebar = document.getElementById('filterSidebar');
			if (sidebar) {
				sidebar.classList.toggle('show');
			}
		}

		// Event listeners
		document.addEventListener('DOMContentLoaded', function () {
			try {
				// Initialize slider
				initializePriceSlider();

				// Filter form submission
				const filterForm = document.getElementById('filterForm');
				if (filterForm) {
					filterForm.addEventListener('submit', function (e) {
						e.preventDefault();
						applyFilters();
					});
				}

				// Search form submission
				const searchForm = document.getElementById('searchForm');
				if (searchForm) {
					searchForm.addEventListener('submit', function (e) {
						e.preventDefault();
						applyFilters();
					});
				}

				// Sort change
				const sortSelect = document.getElementById('sortSelect');
				if (sortSelect) {
					sortSelect.addEventListener('change', function () {
						applyFilters();
					});
				}
			} catch (error) {
				console.error('Error setting up event listeners:', error);
			}
		});
	</script>

	<script src="/js/common.js"></script>

</body>

</html>