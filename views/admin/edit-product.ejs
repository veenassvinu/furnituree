<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product | Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css"> -->
    <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


    <style>
        :root {
            --primary-color: #2c7a7b;
            --primary-hover: #285e61;
            --bg-color: #f8f9fa;
            --card-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
        }

        /* Main Layout */
        body {
            background-color: var(--bg-color);
            font-family: 'Inter', sans-serif;
            color: #333;
            display: flex;
            min-height: 100vh;
        }

        .container {
            padding: 0;
            display: flex;
            width: 100%;
            max-width: 100%;
        }

        /* Sidebar positioning */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: 250px;
            z-index: 1000;
        }

        /* Main content positioning */
        .main-content {
            flex: 1;
            margin-left: 250px;
            padding: 2rem;
            max-width: calc(100% - 250px);
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }

            .sidebar.active {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                padding: 1rem;
                max-width: 100%;
            }
        }

        /* Page Header */
        .page-header {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
            color: white;
            padding: 2rem;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: var(--card-shadow);
        }

        .page-header h1 {
            margin: 0;
            font-size: 1.8rem;
            font-weight: 600;
        }

        /* Form Card */
        .form-card {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: var(--card-shadow);
            margin-bottom: 1.5rem;
        }

        .form-card h3 {
            color: var(--primary-color);
            font-size: 1.2rem;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #eee;
        }

        /* Form Controls */
        .form-control,
        .form-select {
            border: 2px solid #eee;
            padding: 0.8rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(44, 122, 123, 0.1);
        }

        .form-label {
            font-weight: 500;
            color: #555;
            margin-bottom: 0.5rem;
        }

        /* Image Upload */
        .image-upload-area {
            border: 2px dashed #ddd;
            padding: 2rem;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .image-upload-area:hover {
            border-color: var(--primary-color);
            background-color: rgba(44, 122, 123, 0.05);
        }

        .image-preview img {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .image-preview {
            display: flex;
            gap: 15px;
        }

        .preview-item {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .preview-item img {
            display: block;
            margin-bottom: 8px;
        }


        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
            color: #fff;
        }

        /* Submit Button */
        .submit-btn {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
            color: white;
            padding: 1rem 2rem;
            border-radius: 8px;
            border: none;
            font-weight: 500;
            width: 100%;
            transition: all 0.3s ease;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(44, 122, 123, 0.2);
        }

        /* Error Messages */
        .error-message {
            color: #dc3545;
            font-size: 0.85rem;
            margin-top: 0.25rem;
            display: none;
        }

        /* Modal Styling */
        .modal-custom {
            border-radius: 15px;
            overflow: hidden;
        }

        .modal-custom .modal-header {
            background-color: var(--primary-color);
            color: white;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 1rem;
            }

            .form-card {
                padding: 1.5rem;
            }
        }
    </style>

</head>

<body>
    <div class="container">
        <%- include("../../views/partials/admin/sidebar") %>


            <div class="main-content">
                <!-- Page Header -->
                <div class="page-header">
                    <h1>Edit Product</h1>

                </div>

                <form id="productForm" action="/admin/edit-product/<%= product._id  %>" method="post"
                    enctype="multipart/form-data">
                    <!-- Basic Information -->
                    <div class="form-card">
                        <h3>Basic Information</h3>
                        <div class="row">
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Product Name</label>
                                <input type="text" name="productName" class="form-control"
                                    value="<%=product.productName  %>" placeholder="Enter product name">
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Category</label>

                                <select name="category" class="form-select">
                                    <% for (let i=0; i < cat.length; i++) { %>
                                        <option value="<%= cat[i]._id %>"
                                            <%=product.category.toString()===cat[i]._id.toString() ? 'selected' : '' %>>
                                            <%= cat[i].name %>
                                        </option>
                                        <% } %>
                                </select>

                            </div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Description</label>
                            <input name="description" class="form-control" rows="4" value="<%= product.description %>"
                                placeholder="Enter detailed product description"></input>
                        </div>
                    </div>

                    <!-- Pricing -->
                    <div class="form-card">
                        <h3>Pricing & Inventory</h3>
                        <div class="row">
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Original Price</label>
                                <div class="input-group">
                                    <span class="input-group-text">₹</span>
                                    <input type="text" name="regularPrice" class="form-control"
                                        value="<%= product.originalPrice %>">
                                </div>
                                <span id="regularPrice-error" class="error-message text-danger"
                                    style="display:none;"></span>
                            </div>
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Sale Price</label>
                                <div class="input-group">
                                    <span class="input-group-text">₹</span>
                                    <input type="text" name="salePrice" class="form-control"
                                        value="<%= product.salePrice %>">
                                </div>
                                <span id="salePrice-error" class="error-message text-danger"
                                    style="display:none;"></span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Quantity</label>
                                <input type="number" name="quantity" class="form-control"
                                    value="<%= product.quantity  %>">
                            </div>

                        </div>
                    </div>

                    <!-- Image Upload -->
                    <div class="form-card">
                        <h3>Product Images</h3>
                        <div class="image-upload-area">
                            <div class="image-inputs">
                                <p class="text-muted mb-4">Upload or edit 4 product images</p>
                                <div class="row">

                                    <% for (let i=0; i < 4; i++) { %>
                                        <div class="col-md-3 mb-3">
                                            <input type="file" name="productImages" id="image<%= i %>"
                                                class="image-input form-control" accept="image/*"
                                                data-index="<%= i %>" />
                                        </div>
                                        <% } %>

                                </div>
                            </div>

                            <!-- Display Existing Images -->
                            <div id="imagePreview" class="image-preview mt-4 d-flex flex-wrap gap-3">
                                <% product?.productImages?.forEach((image, index)=> { %>
                                    <div class="image-container position-relative">
                                        <img src="/uploads/product-images/<%= image %>" alt="Product Image"
                                            class="img-thumbnail existing-image" data-index="<%= index %>"
                                            style="width: 150px; height: 150px; object-fit: cover;" />

                                        <button type="button"
                                            class="btn btn-danger btn-sm position-absolute top-0 end-0 delete-image-btn"
                                            data-index="<%= index %>" onclick="deleteImage()">

                                            Delete
                                        </button>
                                    </div>
                                    <% }) %>
                            </div>
                        </div>
                    </div>


                    <!-- Submit Button -->
                    <button type="submit" class="submit-btn">
                        Publish Product
                    </button>
                </form>


                <div class="modal fade" id="cropperModal" tabindex="-1">
                    <div class="modal-dialog modal-lg modal-custom">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Crop Image</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <img id="imageToCrop" class="img-fluid" alt="Image for cropping">
                            </div>
                            <div class="modal-footer">
                                <button id="cropButton" type="button" class="btn btn-primary">Crop</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>



            </div>

    </div>




    <!--     
     <script>

        document.querySelector("#imagePreview").addEventListener("click", function (event) {
            if (event.target.classList.contains("delete-image-btn")) {
                deleteImage(event);
            }
        });


        async function deleteImage(event) {
            const button = event.target;
            const imageIndex = button.getAttribute("data-index");
            const productId = "<%= product._id %>"; // Ensure this is set correctly

            // SweetAlert2 confirmation
            const confirmation = await Swal.fire({
                title: "Are you sure?",
                text: "Do you really want to delete this image?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "Cancel"
            });

            if (!confirmation.isConfirmed) return;

            try {
                const response = await fetch("/admin/delete-image", {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ productId, imageIndex })
                });

                const result = await response.json();

                if (response.ok) {
                    // Remove the image from the DOM
                    button.closest(".image-container").remove();

                    // Success Swal
                    Swal.fire({
                        title: "Deleted!",
                        text: result.message || "Image deleted successfully.",
                        icon: "success",
                        confirmButtonColor: "#2c7a7b"
                    });
                } else {
                    // Error Swal
                    Swal.fire({
                        title: "Error",
                        text: result.error || "Failed to delete the image.",
                        icon: "error",
                        confirmButtonColor: "#dc3545"
                    });
                }
            } catch (error) {
                console.error("Error deleting image:", error);

                // Network error Swal
                Swal.fire({
                    title: "Error",
                    text: "An error occurred while deleting the image.",
                    icon: "error",
                    confirmButtonColor: "#dc3545"
                });
            }
        }

        function validateForm() {
            let isValid = true;

            // Clear previous error messages
            document.querySelectorAll(".error-message").forEach((element) => {
                element.style.display = "none";
                element.textContent = "";
            });

            // Get form field values
            const productName = document.getElementById("productName").value.trim();
            //   const brand = document.querySelector("select[name='brand']").value.trim();
            const description = document.querySelector("textarea[name='description']").value.trim();
            const regularPrice = document.querySelector("input[name='regularPrice']").value.trim();
            const salePrice = document.querySelector("input[name='salePrice']").value.trim();
            const quantity = document.querySelector("input[name='quantity']").value.trim();

            // Validate Product Name
            if (productName === "") {
                const error = document.getElementById("productName-error");
                error.style.display = "block";
                error.textContent = "Product name cannot be empty.";
                isValid = false;
            }

            // Validate Description
            if (description.length < 10) {
                const error = document.getElementById("description-error");
                error.style.display = "block";
                error.textContent = "Description must be at least 10 characters long.";
                isValid = false;
            }

            // Validate Regular Price
            if (!isPositiveNumber(regularPrice)) {
                const error = document.getElementById("regularPrice-error");
                error.style.display = "block";
                error.textContent = "Regular price must be a valid positive number.";
                isValid = false;
            }

            // Validate Sale Price
            if (!isPositiveNumber(salePrice)) {
                const error = document.getElementById("salePrice-error");
                error.style.display = "block";
                error.textContent = "Sale price must be a valid positive number.";
                isValid = false;
            } else if (parseFloat(salePrice) >= parseFloat(regularPrice)) {
                const error = document.getElementById("salePrice-error");
                error.style.display = "block";
                error.textContent = "Sale price must be less than the regular price.";
                isValid = false;
            }

            // Validate Quantity
            if (!isPositiveInteger(quantity)) {
                const error = document.getElementById("quantity-error");
                error.style.display = "block";
                error.textContent = "Quantity must be a valid positive integer.";
                isValid = false;
            }

            return isValid;
        }

        // Utility function: Check if a value is a positive number
        function isPositiveNumber(value) {
            const number = parseFloat(value);
            return !isNaN(number) && number > 0;
        }

        // Utility function: Check if a value is a positive integer
        function isPositiveInteger(value) {
            const number = parseInt(value, 10);
            return !isNaN(number) && number > 0 && Number.isInteger(number);
        }

        // Handle image previews for thumbnails
        document.querySelector("input[name='images']").addEventListener("change", function (event) {
            const container = document.querySelector(".thumbnails-container");
            container.innerHTML = ""; // Clear previous thumbnails
            Array.from(event.target.files).forEach((file) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "thumbnail";
                    img.style.width = "200px";
                    img.style.height = "200px";
                    container.appendChild(img);
                };
                reader.readAsDataURL(file);
            });
        });




    </script>   -->


    <script>
        // Delete Image with SweetAlert
        document.querySelector("#imagePreview").addEventListener("click", function (event) {
            if (event.target.classList.contains("delete-image-btn")) {
                deleteImage(event);
            }
        });

        async function deleteImage(event) {
            const button = event.target;
            const imageIndex = button.getAttribute("data-index");
            const productId = "<%= product._id %>";

            const confirmation = await Swal.fire({
                title: "Are you sure?",
                text: "Do you really want to delete this image?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "Cancel"
            });

            if (!confirmation.isConfirmed) return;

            try {
                const response = await fetch("/admin/delete-image", {
                    method: "DELETE",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ productId, imageIndex })
                });

                const result = await response.json();

                if (response.ok) {
                    button.closest(".image-container").remove();
                    Swal.fire({ title: "Deleted!", text: result.message || "Image deleted successfully.", icon: "success" });
                } else {
                    Swal.fire({ title: "Error", text: result.error || "Failed to delete the image.", icon: "error" });
                }
            } catch (error) {
                console.error("Error deleting image:", error);
                Swal.fire({ title: "Error", text: "An error occurred while deleting the image.", icon: "error" });
            }
        }

        // ✅ Form Validation for Edit Product
        function validateForm() {
            let isValid = true;

            // Clear previous error messages
            document.querySelectorAll(".error-message").forEach((element) => {
                element.style.display = "none";
                element.textContent = "";
            });

            // Get form field values
            const regularPrice = parseFloat(document.querySelector("input[name='regularPrice']").value.trim()) || 0;
            const salePrice = parseFloat(document.querySelector("input[name='salePrice']").value.trim()) || 0;

            // ✅ Regular Price Validation
            if (regularPrice <= 0 || isNaN(regularPrice)) {
                showError("regularPrice-error", "Regular price must be greater than 0.");
                isValid = false;
            }

            // ✅ Sale Price Validation (check only if regular price is valid)
            if (salePrice <= 0 || isNaN(salePrice)) {
                showError("salePrice-error", "Sale price must be greater than 0.");
                isValid = false;
            } else if (regularPrice > 0 && salePrice >= regularPrice) {
                showError("salePrice-error", "Sale price must be less than the regular price.");
                isValid = false;
            }

            return isValid;
        }

        // Utility function: Show inline error message
        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (errorElement) {
                errorElement.style.display = "block";
                errorElement.textContent = message;
            } else {
                console.warn(`Error element with ID '${elementId}' not found.`);
            }
        }

        // ✅ Attach validation to form submit
        document.querySelector("form").addEventListener("submit", function (e) {
            if (!validateForm()) {
                e.preventDefault(); // Stop form from submitting if invalid
            }
        });
    </script>




    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const urlParams = new URLSearchParams(window.location.search);
            const updated = urlParams.get("updated");

            if (urlParams.get("updated") === "success") {
                Swal.fire({
                    icon: "success",
                    title: "Product Updated",
                    text: "Your product was successfully updated!",
                    confirmButtonColor: "#2c7a7b"
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Redirect to Product Management page
                        window.location.href = "/admin/product";
                    }
                });

                // Optionally clean the URL
                const url = new URL(window.location);
                url.searchParams.delete("updated");
                window.history.replaceState({}, document.title, url.pathname);
            }
        });
    </script>





    <script>
        let cropper; // Global cropper instance
        let currentInput = null; // Tracks the current input element being processed


        document.querySelectorAll(".image-input").forEach(input => {
            input.addEventListener("change", function (e) {
                currentInput = e.target; // Track the input
                const file = e.target.files[0];
                const previewContainer = document.getElementById("imagePreview");

                if (previewContainer.children.length >= 4) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Limit Reached',
                        text: 'You can upload a maximum of 4 images.',
                        confirmButtonColor: '#3085d6'
                    });
                    e.target.value = "";
                    return;
                }

                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const imageToCrop = document.getElementById("imageToCrop");
                        imageToCrop.src = e.target.result;

                        // Show modal
                        const modal = new bootstrap.Modal(document.getElementById("cropperModal"));
                        modal.show();

                        // Destroy existing cropper
                        if (cropper) cropper.destroy();

                        // Initialize new cropper
                        cropper = new Cropper(imageToCrop, {
                            aspectRatio: 1,
                            viewMode: 2
                        });
                    };
                    reader.readAsDataURL(file);
                }
            });
        });


        document.getElementById("cropButton").addEventListener("click", function () {
            if (!cropper || !currentInput) return;

            const croppedCanvas = cropper.getCroppedCanvas({ width: 800, height: 800 });

            croppedCanvas.toBlob(function (blob) {
                const file = new File([blob], 'cropped-image.jpg', { type: 'image/jpeg' });

                // Replace the current input with the new blob
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                currentInput.files = dataTransfer.files;

                // Create a preview container for the new cropped image
                const previewContainer = document.getElementById("imagePreview");

                const newImageDiv = document.createElement("div");
                newImageDiv.className = "image-container position-relative";

                const imgElement = document.createElement("img");
                imgElement.src = URL.createObjectURL(blob);
                imgElement.className = "img-thumbnail existing-image";
                imgElement.style.width = "150px";
                imgElement.style.height = "150px";
                imgElement.style.objectFit = "cover";

                const deleteBtn = document.createElement("button");
                deleteBtn.className = "btn btn-danger btn-sm position-absolute top-0 end-0 delete-image-btn";
                deleteBtn.innerText = "Delete";
                deleteBtn.onclick = function () {
                    newImageDiv.remove();
                    currentInput.value = ""; // Clear file input
                };

                newImageDiv.appendChild(imgElement);
                newImageDiv.appendChild(deleteBtn);
                previewContainer.appendChild(newImageDiv);

                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById("cropperModal"));
                modal.hide();
            }, 'image/jpeg');
        });


    </script>


    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>

</html>