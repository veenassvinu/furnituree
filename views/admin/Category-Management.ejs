<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Furniture - Category Management</title>
    <style>
        /* Reset Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #f4f4f4;
            color: #333;
        }

        /* Container Layout */
        .container {
            display: flex;
            min-height: 100vh;
            overflow: hidden;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 250px;
            height: 100vh;
            background-color: #2c7a7b;
            color: white;
            position: fixed;
            left: 0;
            padding: 20px;
        }

        .sidebar h2 {
            margin: 0 0 20px;
        }

        .sidebar a {
            display: block;
            text-decoration: none;
            color: white;
            margin: 10px 0;
        }

        .sidebar a:hover {
            background-color: #285e61;
            padding: 10px;
            border-radius: 5px;
        }


        /* Main Content Styles */
        .main-content {
            flex: 1;
            padding: 20px;
            background-color: #fff;
            display: flex;
            flex-direction: column;
            gap: 20px;
            overflow: auto;
            margin-left: 250px;
            /* Adjust for sidebar width */
        }


        .top-bar {
            background-color: #5cc6ba;
            padding: 15px;
            color: white;
            font-size: 20px;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .search-container {
            display: flex;
            gap: 10px;
        }

        .search-input {
            flex: 1;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        .search-button {
            padding: 10px 20px;
            background-color: #0099ff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .content-wrapper {
            display: flex;
            gap: 20px;
        }

        /* Category Table */
        .category-table {
            width: 100%;
            border-collapse: collapse;
        }

        .category-table th,
        .category-table td {
            text-align: left;
            padding: 12px;
            border-bottom: 1px solid #eee;
        }

        .category-table th {
            background-color: #f9f9f9;
        }

        /* Form Section */
        .form-section {
            flex: 1;
            padding: 20px;
            background-color: #5cc6ba;
            border-radius: 8px;
            color: white;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

        .form-group input {
            width: 100%;
            padding: 10px;
            border-radius: 4px;
            border: none;
        }

        .create-button {
            width: 100%;
            padding: 10px;
            background-color: #0099ff;
            border: none;
            border-radius: 4px;
            color: white;
            cursor: pointer;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .content-wrapper {
                flex-direction: column;
            }

            .form-section {
                margin-top: 20px;
            }

            .sidebar {
                width: 200px;
            }
        }
    </style>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    
</head>

<body>
    <div class="container">
        <!-- Sidebar -->
        <%- include("../../views/partials/admin/sidebar") %>

            <!-- Main Content -->
            <div class="main-content">
                <!-- Top Bar -->
                <div class="top-bar">
                    Category Management
                </div>

                <!-- Search Bar -->
                <div class="search-container">
                    <input type="text" class="search-input" placeholder="Search Categories">
                    <button class="search-button">Search</button>
                </div>

                <!-- Content Wrapper -->
                <div class="content-wrapper">
                    <!-- Category Table -->
                    <div class="table-wrapper">
                        <table class="category-table">
                            <thead>
                                <tr>
                                    <th>Name</th>

                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (cat && cat.length> 0) { %>
                                    <% cat.forEach(cat=> { %>
                                        <tr>
                                            <td>
                                                <%= cat.name %>
                                            </td>
                                            <td>
                                                <!-- <button class="update-button" class="btn-secondary">Update</button> -->
                                                <button class="btn btn-secondary btn-sm update-button"
                                                    data-bs-toggle="modal" data-bs-target="#updateModal"
                                                    onclick="populateUpdateModal('<%= cat._id %>', '<%= cat.name %>', '<%= cat.description %>')">
                                                    Update
                                                </button>
                                                <!-- Update Modal -->
                                                <div class="modal fade" id="updateModal" tabindex="-1"
                                                    aria-labelledby="updateModalLabel" aria-hidden="true">
                                                    <div class="modal-dialog">
                                                        <div class="modal-content">
                                                            <div class="modal-header">
                                                                <h5 class="modal-title" id="updateModalLabel">Update
                                                                    Category</h5>
                                                                <button type="button" class="btn-close"
                                                                    data-bs-dismiss="modal" aria-label="Close"></button>
                                                            </div>
                                                            <div class="modal-body">
                                                                <form id="updateCategoryForm">
                                                                    <input type="hidden" id="updateCategoryId">
                                                                    <div class="mb-3">
                                                                        <label for="updateCategoryName"
                                                                            class="form-label">Category Name</label>
                                                                        <input type="text" class="form-control"
                                                                            id="updateCategoryName"
                                                                            placeholder="Enter category name"
                                                                            value="<%=cat.name%>">
                                                                    </div>
                                                                    <div class="mb-3">
                                                                        <label for="updateCategoryDescription"
                                                                            class="form-label">Description</label>
                                                                        <input type="text" class="form-control"
                                                                            id="updateCategoryDescription"
                                                                            placeholder="Enter category description"
                                                                            value="<%=cat.description%>">
                                                                    </div>
                                                                </form>
                                                            </div>
                                                            <div class="modal-footer">
                                                                <button type="button" class="btn btn-secondary"
                                                                    data-bs-dismiss="modal">Close</button>
                                                                <button type="button" class="btn btn-primary"
                                                                    onclick="updateCategory()">Save Changes</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>



                                                <!-- <button class="delete-button">Delete</button>

                                            <button 
                                                class="list-button" 
                                                onclick="toggleListStatus(this, '<%= cat.id %>', '<%= cat.isListed %>')">
                                                <%= cat.isListed ? 'unList' : 'List' %>
                                            </button> -->
                                                <button class="btn btn-danger btn-sm delete-button"
                                                    onclick="deleteCategory('<%= cat._id %>')">
                                                    Delete
                                                </button>
                                                <button class="btn btn-primary btn-sm list-button"
                                                    onclick="toggleListStatus(this, '<%= cat._id %>', `<%= cat.isListed %>`)">
                                                    <%= cat.isListed ? 'Unlist' : 'List' %>
                                                </button>
                                            </td>
                                        </tr>
                                        <% }); %>
                                            <% } else { %>
                                                <tr>
                                                    <td colspan="5">No categories available.</td>
                                                </tr>
                                                <% } %>
                            </tbody>

                        </table>
                    </div>

                    <!-- Form Section -->
                    <div class="form-section">
                        <h2>Create Category</h2>
                        <form  method="POST" action="/admin/add-category " onsubmit="handleFormSumbit(event)">
                            <div class="form-group">
                                <label for="name">Category Name</label>
                                <input type="text" id="name" name="name" placeholder="Enter category name">
                            </div>
                           
                            <div class="form-group">
                                <label for="description">Description</label>
                                <input type="text" id="description" name="description"
                                    placeholder="Enter category description">
                            </div>
                            <button type="submit" class="create-button">Create Category</button>
                        </form>
                    </div>
                </div>
            </div>
    </div>
</body>
<script>

    function handleFormSumbit(event) {
    event.preventDefault();

    // Validate the form
    const name = document.getElementsByName("name")[0].value.trim();
    const description = document.getElementById("description").value.trim();

    if (!name) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Please enter a category name.',
        });
        return;
    }

    if (!/^[a-zA-Z\s]+$/.test(name)) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Category name should contain only alphabetic characters.',
        });
        return;
    }

    if (!description) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Please enter a category description.',
        });
        return;
    }

    // Proceed with form submission if validation passes
    fetch('/admin/add-category', {
        method: 'POST',
        headers: {
            'content-type': 'application/json'
        },
        body: JSON.stringify({ name, description })
    })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => {
                    throw new Error(err.error || "Unknown error occurred");
                });
            }
            return response.json();
        })
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Category added successfully!',
            }).then(() => {
                location.reload();
            });
        })
       
        .catch(error => {
        // Check if the error message contains "Category already exists."
        if (error.message.includes("Category already exists")) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Category already exists.',
            });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'An error occurred while adding the category.',
                });
            }
        });
}


    function validateForm() {
        clearErrorMessage();
        const name = document.getElementByName("name")[0].value.trim();
        const description = document.getElementById("descriptionId").value.trim();
        isValid = true;

        if (name === "") {
            displayErrorMessage("name-error", "Please enter a name");
            isValid = false
        } else if (!/^[a-zA-Z\s]+$/.test(name)) {
            displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
            isValid = false;
        }
        if (description === "") {
            displayErrorMessage("description-error", "Please enter a description")
            isValid = false;
        }
        return isValid;
    }

    function displayErrorMessage(elementId, message) {
        var errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
    function clearErrorMessage() {
        const errorElements = document.getElementsByClassName("error-message");
        Array.from(errorElements).forEach((element) => {
            element.innerText = "";
            element.style.display = "none";
        });
    }

  
    function populateUpdateModal(id, name, description) {
        document.getElementById('updateCategoryId').value = id;
        document.getElementById('updateCategoryName').value = name;
        document.getElementById('updateCategoryDescription').value = description;
    }
    function updateCategory() {
        // Get values from the modal inputs
        const categoryId = document.getElementById("updateCategoryId").value;
        console.log("Catergory Id",categoryId)
        const categoryName = document.getElementById("updateCategoryName").value.trim();
        const categoryDescription = document.getElementById("updateCategoryDescription").value.trim();

        // Validate input fields
        if (!categoryName || !categoryDescription) {
            Swal.fire({
                        icon: 'error',
                        title: "Oops",
                        text: "Please fill in all fields.",
                    })
            return;
        }
        
        // Send the updated data to the server
        fetch(`/admin/update-category/${categoryId}`, {
            method: 'PUT', // Adjust method as per your backend setup
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                name: categoryName,
                description: categoryDescription,
            }),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Failed to update category.");
                }
                return response.json();
            })
            .then((data) => {
                if (data.success) {
                    // alert("Category updated successfully!");
                    Swal.fire({
                        icon: 'error',
                        title: "Oops",
                        text: "Category updated successfully!.",
                    })
                    location.reload(); // Reload to reflect changes
                } else {
                    // alert("Error updating category: " + data.message);
                    Swal.fire({
                        icon: 'error',
                        title: "Oops",
                        text: "Error updating category:"+data.message,
                    })
                }
            })
            .catch((error) => {
                console.error("Error:", error);
                // alert("An error occurred while updating the category.");
                Swal.fire({
                        icon: 'error',
                        title: "Oops",
                        text: "An error occurred while updating the category.",
                    })
            });
    }
   
    function deleteCategory(categoryId) {
    Swal.fire({
        title: "Are you sure?",
        text: "Do you really want to delete this category? This action cannot be undone.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, delete it!",
        cancelButtonText: "Cancel",
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/delete-category/${categoryId}`, {
                method: "DELETE",
            })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error("Failed to delete category.");
                    }
                    return response.json();
                })
                .then((data) => {
                    if (data.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Deleted!",
                            text: "Category deleted successfully.",
                        }).then(() => {
                            location.reload(); // Reload the page to reflect changes
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: `Error deleting category: ${data.message}`,
                        });
                    }
                })
                .catch((error) => {
                    console.error("Error:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "An error occurred while deleting the category.",
                    });
                });
        }
    });
}

   

    function toggleListStatus(button, categoryId, isListed) {
    const action = isListed ? 'unlist-category' : 'list-category';
    const confirmMessage = isListed
        ? "Are you sure you want to unlist this category?"
        : "Are you sure you want to list this category?";

    Swal.fire({
        title: 'Confirm Action',
        text: confirmMessage,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: isListed ? 'Yes, Unlist' : 'Yes, List',
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/${action}/${categoryId}`, {
                method: 'PUT',
            })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error(`Failed to ${isListed ? 'unlist' : 'list'} category.`);
                    }
                    return response.json();
                })
                .then((data) => {
                    if (data.success) {
                        // Update button text dynamically
                        button.textContent = isListed ? "List" : "Unlist";
                        button.setAttribute('onclick', `toggleListStatus(this, '${categoryId}', ${!isListed})`);
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: `Category ${isListed ? 'unlisted' : 'listed'} successfully!`,
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: `Error: ${data.message}`,
                        });
                    }
                })
                .catch((error) => {
                    console.error("Error:", error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: `An error occurred while ${isListed ? 'unlisting' : 'listing'} the category.`,
                    });
                });
        }
    });
}




</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  

</html>