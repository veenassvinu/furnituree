<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product | Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">

    <style>
        :root {
            --primary-color: #2c7a7b;
            --primary-hover: #285e61;
            --bg-color: #f8f9fa;
            --card-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
        }

        /* Main Layout */
        body {
            background-color: var(--bg-color);
            font-family: 'Inter', sans-serif;
            color: #333;
            display: flex;
            min-height: 100vh;
        }

        .container {
            padding: 0;
            display: flex;
            width: 100%;
            max-width: 100%;
        }

        /* Sidebar positioning */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: 250px;
            z-index: 1000;
        }

        /* Main content positioning */
        .main-content {
            flex: 1;
            margin-left: 250px;
            padding: 2rem;
            max-width: calc(100% - 250px);
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }

            .sidebar.active {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                padding: 1rem;
                max-width: 100%;
            }
        }

        /* Page Header */
        .page-header {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
            color: white;
            padding: 2rem;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: var(--card-shadow);
        }

        .page-header h1 {
            margin: 0;
            font-size: 1.8rem;
            font-weight: 600;
        }

        /* Form Card */
        .form-card {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: var(--card-shadow);
            margin-bottom: 1.5rem;
        }

        .form-card h3 {
            color: var(--primary-color);
            font-size: 1.2rem;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #eee;
        }

        /* Form Controls */
        .form-control,
        .form-select {
            border: 2px solid #eee;
            padding: 0.8rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(44, 122, 123, 0.1);
        }

        .form-label {
            font-weight: 500;
            color: #555;
            margin-bottom: 0.5rem;
        }

        /* Image Upload */
        .image-upload-area {
            border: 2px dashed #ddd;
            padding: 2rem;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .image-upload-area:hover {
            border-color: var(--primary-color);
            background-color: rgba(44, 122, 123, 0.05);
        }

        .image-preview img {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .image-preview {
            display: flex;
            gap: 15px;
        }

        .preview-item {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .preview-item img {
            display: block;
            margin-bottom: 8px;
        }


        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
            color: #fff;
        }

        /* Submit Button */
        .submit-btn {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
            color: white;
            padding: 1rem 2rem;
            border-radius: 8px;
            border: none;
            font-weight: 500;
            width: 100%;
            transition: all 0.3s ease;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(44, 122, 123, 0.2);
        }

        /* Error Messages */
        .error-message {
            color: #dc3545;
            font-size: 0.85rem;
            margin-top: 0.25rem;
            display: none;
        }

        /* Modal Styling */
        .modal-custom {
            border-radius: 15px;
            overflow: hidden;
        }

        .modal-custom .modal-header {
            background-color: var(--primary-color);
            color: white;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 1rem;
            }

            .form-card {
                padding: 1.5rem;
            }
        }
    </style>




</head>

<body>
    <div class="container">
        <%- include("../../views/partials/admin/sidebar") %>


            <div class="main-content">
                <!-- Page Header -->
                <div class="page-header">
                    <h1>Add New Product ADMIN</h1>
                    <p class="mb-0">Create a new product listing</p>
                </div>

                <form id="productForm" action="/admin/addproduct" method="post" enctype="multipart/form-data"
                    onsubmit="return validateForm()">
                    <!-- Basic Information -->
                    <div class="form-card">
                        <h3>Basic Information</h3>
                        <div class="row">
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Product Name</label>
                                <input type="text" name="productName" class="form-control"
                                    placeholder="Enter product name">
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Category</label>
                                <select name="category" class="form-select">
                                    <% for(let i=0; i<cat.length; i++) { %>
                                        <option value="<%= cat[i].name %>">
                                            <%= cat[i].name %>
                                        </option>
                                        <% } %>
                                </select>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Description</label>
                            <textarea name="description" class="form-control" rows="4"
                                placeholder="Enter detailed product description"></textarea>
                        </div>
                    </div>

                    <!-- Pricing -->
                    <div class="form-card">
                        <h3>Pricing & Inventory</h3>
                        <div class="row">
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Regular Price</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="text" name="regularPrice" class="form-control">
                                </div>
                            </div>

                            <div class="col-md-6 mb-4">
                                <label class="form-label">Sale Price</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="text" name="salePrice" class="form-control">
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Quantity</label>
                                <input type="number" name="quantity" class="form-control">
                            </div>

                            <div class="col-md-6 mb-4">
                                <label class="form-label">Color</label>
                                <input type="text" name="color" class="form-control">
                            </div>
                        </div>
                    </div>

                    <!-- Image Upload -->
                    <div class="form-card">
                        <h3>Product Images</h3>
                        <div class="image-upload-area">
                            <div class="image-inputs">
                                <p class="text-muted mb-4">Upload exactly 4 product images (Recommended size: 800x800px)
                                </p>
                                <div class="row">
                                    <% for(let i=1; i<=4; i++) { %>
                                        <div class="col-md-3 mb-3">
                                            <input type="file" id="image<%= i %>" class="image-input form-control"
                                                accept="image/*" data-index="<%= i %>">
                                        </div>
                                        <% } %>
                                </div>
                            </div>
                            <div id="imagePreview" class="image-preview mt-4 d-flex flex-wrap gap-3"></div>
                        </div>
                    </div>


                    <!-- Submit Button -->
                    <button type="submit" class="submit-btn">
                        Publish Product
                    </button>
                </form>


                <div class="modal fade" id="cropperModal" tabindex="-1">
                    <div class="modal-dialog modal-lg modal-custom">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Crop Image</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <img id="imageToCrop" class="img-fluid" alt="Image for cropping">
                            </div>
                            <div class="modal-footer">
                                <button id="cropButton" type="button" class="btn btn-primary">Crop</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>



            </div>


    </div>



    <!-- <script>
        function validateForm() {
            clearErrorMessages(); // Clear previous error messages

            // Getting form values
            const name = document.getElementsByName('productName')[0].value.trim();
            const description = document.getElementById('descriptionid').value.trim();
            const price = document.getElementsByName('regularPrice')[0].value.trim();
            const saleprice = document.getElementsByName('salePrice')[0].value.trim();
            const color = document.getElementsByName('color')[0].value.trim();
            const category = document.getElementsByName('category')[0].value.trim();
            const images = document.getElementById('input1');
            const quantity = document.getElementsByName('quantity')[0].value.trim();

            let isValid = true;

            // Images Validation
            const previewContainer = document.getElementById("imagePreview");
            const uploadedImages = previewContainer.children.length;

            if (uploadedImages !== 4) {
                displayErrorMessage('images-error', 'Please upload exactly 4 images.');
                isValid = false;
            }

            // Product Name Validation
            if (name === "") {
                displayErrorMessage('productName-error', 'Please enter a product name.');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
                isValid = false;
            }

            // Description Validation
            if (description === "") {
                displayErrorMessage('description-error', 'Please enter a product description.');
                isValid = false;
            }

            // Quantity Validation
            if (!/^\d+$/.test(quantity) || parseInt(quantity) < 0) {
                displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                isValid = false;
            }

            // Price Validation
            if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) <= 0) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }

            // Sale Price Validation
            if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                displayErrorMessage('salePrice-error', 'Please enter a valid non-negative sale price.');
                isValid = false;
            }
            if (parseFloat(saleprice) >= parseFloat(price)) {
                displayErrorMessage('salePrice-error', 'Sale price must be less than the regular price.');
                isValid = false;
            }

            // Color Validation
            if (color === "") {
                displayErrorMessage('color-error', 'Please enter a color.');
                isValid = false;
            }

            // Category Validation
            if (category === "") {
                displayErrorMessage('category-error', 'Please select a category.');
                isValid = false;
            }

            // Images Validation
            if (images.files.length === 0) {
                displayErrorMessage('images-error', 'Please select at least one image.');
                isValid = false;
            }

            return isValid; // Return the final validation result
        }

        function displayErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (errorElement) {
                errorElement.innerText = message;
                errorElement.style.display = "block";
            }
        }

        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName('error-message');
            Array.from(errorElements).forEach(element => {
                element.innerText = '';
                element.style.display = 'none';
            });
        }
    </script> -->

    <script>
        function validateForm() {
          let isValid = true;
    
          // Clear previous error messages
          document.querySelectorAll(".error-message").forEach((element) => {
            element.style.display = "none";
            element.textContent = "";
          });
    
          // Get form field values
          const productName = document.getElementById("productName").value.trim();
        //   const brand = document.querySelector("select[name='brand']").value.trim();
          const description = document.querySelector("textarea[name='description']").value.trim();
          const regularPrice = document.querySelector("input[name='regularPrice']").value.trim();
          const salePrice = document.querySelector("input[name='salePrice']").value.trim();
          const quantity = document.querySelector("input[name='quantity']").value.trim();
    
          // Validate Product Name
          if (productName === "") {
            const error = document.getElementById("productName-error");
            error.style.display = "block";
            error.textContent = "Product name cannot be empty.";
            isValid = false;
          }
    
          // Validate Brand Selection
        //   if (brand === "") {
        //     const error = document.getElementById("brand-error");
        //     error.style.display = "block";
        //     error.textContent = "Please select a brand.";
        //     isValid = false;
        //   }
    
          // Validate Description
          if (description.length < 10) {
            const error = document.getElementById("description-error");
            error.style.display = "block";
            error.textContent = "Description must be at least 10 characters long.";
            isValid = false;
          }
    
          // Validate Regular Price
          if (!isPositiveNumber(regularPrice)) {
            const error = document.getElementById("regularPrice-error");
            error.style.display = "block";
            error.textContent = "Regular price must be a valid positive number.";
            isValid = false;
          }
    
          // Validate Sale Price
          if (!isPositiveNumber(salePrice)) {
            const error = document.getElementById("salePrice-error");
            error.style.display = "block";
            error.textContent = "Sale price must be a valid positive number.";
            isValid = false;
          } else if (parseFloat(salePrice) >= parseFloat(regularPrice)) {
            const error = document.getElementById("salePrice-error");
            error.style.display = "block";
            error.textContent = "Sale price must be less than the regular price.";
            isValid = false;
          }
    
          // Validate Quantity
          if (!isPositiveInteger(quantity)) {
            const error = document.getElementById("quantity-error");
            error.style.display = "block";
            error.textContent = "Quantity must be a valid positive integer.";
            isValid = false;
          }
    
          return isValid;
        }
    
        // Utility function: Check if a value is a positive number
        function isPositiveNumber(value) {
          const number = parseFloat(value);
          return !isNaN(number) && number > 0;
        }
    
        // Utility function: Check if a value is a positive integer
        function isPositiveInteger(value) {
          const number = parseInt(value, 10);
          return !isNaN(number) && number > 0 && Number.isInteger(number);
        }
    
        // Handle image previews for thumbnails
        document.querySelector("input[name='images']").addEventListener("change", function (event) {
          const container = document.querySelector(".thumbnails-container");
          container.innerHTML = ""; // Clear previous thumbnails
          Array.from(event.target.files).forEach((file) => {
            const reader = new FileReader();
            reader.onload = function (e) {
              const img = document.createElement("img");
              img.src = e.target.result;
              img.className = "thumbnail";
              img.style.width = "200px";
              img.style.height = "200px";
              container.appendChild(img);
            };
            reader.readAsDataURL(file);
          });
        });
    
    
      </script>
    
      




    <script>
        let cropper; // Global cropper instance
        let currentInput; // Tracks the current input element being processed

        document.querySelectorAll(".image-input").forEach(input => {
            input.addEventListener("change", function (e) {
                const file = e.target.files[0];
                const previewContainer = document.getElementById("imagePreview");
                const uploadedImages = previewContainer.children.length;

                if (uploadedImages >= 4) {
                    alert("You can upload a maximum of 4 images.");
                    e.target.value = ""; // Clear the file input
                    return;
                }

                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const imageToCrop = document.getElementById("imageToCrop");
                        imageToCrop.src = e.target.result;

                        // Open modal and initialize cropper
                        const modal = new bootstrap.Modal(document.getElementById("cropperModal"));
                        modal.show();

                        // Destroy previous cropper instance if it exists
                        if (cropper) {
                            cropper.destroy();
                        }

                        // Initialize cropper
                        cropper = new Cropper(imageToCrop, {
                            aspectRatio: 1, // Ensures a square crop
                            viewMode: 2
                        });
                    };
                    reader.readAsDataURL(file);
                }
            });
        });


        // Handle crop button click
        // Modify the crop button event listener
        document.getElementById("cropButton").addEventListener("click", function () {
            const croppedCanvas = cropper.getCroppedCanvas({
                width: 800,
                height: 800
            });

            // Convert canvas to blob
            croppedCanvas.toBlob(function (blob) {
                // Create a File object
                const file = new File([blob], 'cropped-image.jpg', { type: 'image/jpeg' });

                // Create a new FileList-like object
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);

                // Create file input for the cropped image
                const fileInput = document.createElement('input');
                fileInput.type = 'file';
                fileInput.name = 'productImages';  // Match the name expected by multer
                fileInput.style.display = 'none';
                fileInput.files = dataTransfer.files;

                document.getElementById('productForm').appendChild(fileInput);

                // Preview the cropped image
                const previewContainer = document.getElementById("imagePreview");
                const previewItem = document.createElement("div");
                previewItem.classList.add("preview-item");

                const imgPreview = document.createElement("img");
                imgPreview.src = URL.createObjectURL(blob);
                previewItem.appendChild(imgPreview);

                const deleteButton = document.createElement("button");
                deleteButton.innerText = "Delete";
                deleteButton.classList.add("btn", "btn-danger", "btn-sm", "mt-2");
                deleteButton.onclick = function () {
                    previewItem.remove();
                    fileInput.remove();
                };
                previewItem.appendChild(deleteButton);

                previewContainer.appendChild(previewItem);

                // Close the modal
                const modal = bootstrap.Modal.getInstance(document.getElementById("cropperModal"));
                modal.hide();
            }, 'image/jpeg');
        });


    </script>


    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
</body>

</html>