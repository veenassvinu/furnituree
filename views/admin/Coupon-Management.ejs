<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Coupon Management</title>
  
    <link rel="stylesheet" href="/css/coupon.css">
</head>

<body>
    <div class="container">
        <%- include("../../views/partials/admin/sidebar") %>

            <div class="main-content">
                <!-- Table Section -->
                <div class="table-section">
                    <div class="top-bar">Coupon Management</div>

                    <form method="get" action="/admin/coupon" class="search-container">
                        <input type="text" name="search" class="search-input" placeholder="Search coupons"
                            value="<%= search || '' %>">
                        <button type="submit" class="search-button">Search</button>
                    </form>

                    <!-- Section Tabs -->
                    <div class="section-tabs">
                        <button class="tab-button active" onclick="switchTab('active')">Active Coupons</button>
                        <button class="tab-button" onclick="switchTab('deleted')">Previously Used Coupons</button>
                    </div>

                    <!-- Active Coupons Table -->
                    <div id="active-tab" class="tab-content active">
                        <table>
                            <thead>
                                <tr>
                                    <th>Code</th>
                                    <th>Discount</th>
                                    <th>Min Price</th>
                                    <th>Valid From</th>
                                    <th>Valid Until</th>
                                    <th>Status</th>
                                    <th>Update</th>
                                    <th>Delete</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% const activeCoupons = coupons.filter(coupon => !coupon.isDeleted); %>
                                <% if(activeCoupons.length === 0) { %>
                                    <tr>
                                        <td colspan="8" style="text-align:center;">No active coupons found</td>
                                    </tr>
                                <% } else { %>
                                    <% activeCoupons.forEach(coupon => { %>
                                        <% const isExpired = new Date(coupon.expireOn) < new Date(); %>
                                        <tr id="row-<%= coupon._id %>">
                                            <td><%= coupon.name %></td>
                                            <td><%= coupon.offerPrice %></td>
                                            <td>₹<%= coupon.minimumPrice %></td>
                                            <td><%= coupon.createOn.toISOString().split("T")[0] %></td>
                                            <td><%= coupon.expireOn.toISOString().split("T")[0] %></td>
                                            <td>
                                                <span class="status-badge <%= isExpired ? 'status-expired' : 'status-active' %>">
                                                    <%= isExpired ? 'Expired' : 'Active' %>
                                                </span>
                                            </td>
                                            <td>
                                                <button type="button" class="update-button"
                                                    onclick='openEditModal(`<%- JSON.stringify(coupon) %>`)'>
                                                    Update
                                                </button>
                                            </td>
                                            <td>
                                                <button type="button" class="delete-button"
                                                    onclick="deleteCoupon('<%= coupon._id %>')">
                                                    Delete
                                                </button>
                                            </td>
                                        </tr>
                                    <% }) %>
                                <% } %>
                            </tbody>
                        </table>
                    </div>

                    <!-- Previously Used Coupons Table -->
                    <div id="deleted-tab" class="tab-content">
                        <table>
                            <thead>
                                <tr>
                                    <th>Code</th>
                                    <th>Discount</th>
                                    <th>Min Price</th>
                                    <th>Valid From</th>
                                    <th>Valid Until</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% const deletedCoupons = coupons.filter(coupon => coupon.isDeleted); %>
                                <% if(deletedCoupons.length === 0) { %>
                                    <tr>
                                        <td colspan="6" style="text-align:center;">No previously used coupons found</td>
                                    </tr>
                                <% } else { %>
                                    <% deletedCoupons.forEach(coupon => { %>
                                        <tr class="deleted-coupon">
                                            <td><%= coupon.name %></td>
                                            <td><%= coupon.offerPrice %></td>
                                            <td>₹<%= coupon.minimumPrice %></td>
                                            <td><%= coupon.createOn.toISOString().split("T")[0] %></td>
                                            <td><%= coupon.expireOn.toISOString().split("T")[0] %></td>
                                            <td>
                                                <span class="status-badge status-expired">
                                                    Used
                                                </span>
                                            </td>
                                        </tr>
                                    <% }) %>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Form Section -->
                <div class="form-section">
                    <form method="post" action="/admin/coupon/create" onsubmit="return handleCreateCoupon(event)">
                        <div class="form-group">
                            <label>Coupon Code</label>
                            <input type="text" name="name" id="couponName" required>
                        </div>
                        <div class="form-group">
                            <label>Discount</label>
                            <input type="number" name="offerPrice" id="offerPrice" min="1" required>
                        </div>
                        <div class="form-group">
                            <label>Minimum Price</label>
                            <input type="number" name="minimumPrice" id="minimumPrice" min="1" required>
                        </div>
                        <div class="form-group">
                            <label>Valid From</label>
                            <input type="date" name="createOn" id="createOn" required>
                        </div>
                        <div class="form-group">
                            <label>Valid Until</label>
                            <input type="date" name="expireOn" id="expireOn" required>
                        </div>
                        <button type="submit" class="create-button">Create</button>
                    </form>
                </div>
            </div>
    </div>

    <!-- Update Modal -->
    <div id="editCouponModal" class="modal">
        <div class="modal-content">
            <h3>Edit Coupon</h3>
            <form id="editCouponForm" method="post" onsubmit="return handleUpdateCoupon(event)">
                <input type="hidden" name="id" id="editId">
                <div class="form-group">
                    <label>Coupon Code</label>
                    <input type="text" name="name" id="editName" required>
                </div>
                <div class="form-group">
                    <label>Discount</label>
                    <input type="number" name="offerPrice" id="editOffer" min="1" required>
                </div>
                <div class="form-group">
                    <label>Minimum Price</label>
                    <input type="number" name="minimumPrice" id="editMin" min="1" required>
                </div>
                <div class="form-group">
                    <label>Valid From</label>
                    <input type="date" name="createOn" id="editFrom" required>
                </div>
                <div class="form-group">
                    <label>Valid Until</label>
                    <input type="date" name="expireOn" id="editUntil" required>
                </div>
                <button type="submit" class="create-button">Update</button>
                <button type="button" class="cancel-button" onclick="closeModal()">Cancel</button>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function switchTab(tabName) {
            // Remove active class from all tabs
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // Add active class to selected tab
            event.target.classList.add('active');
            document.getElementById(tabName + '-tab').classList.add('active');
        }

        function validateDates(createOn, expireOn) {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const start = new Date(createOn);
            start.setHours(0, 0, 0, 0);
            const end = new Date(expireOn);
            end.setHours(0, 0, 0, 0);

            if (!createOn || !expireOn) {
                Swal.fire("Error", "Please select both start and end dates", "error");
                return false;
            }

            if (isNaN(start.getTime()) || isNaN(end.getTime())) {
                Swal.fire("Error", "Invalid date format", "error");
                return false;
            }

            if (start < today) {
                Swal.fire("Error", "Valid From cannot be in the past", "error");
                return false;
            }

            if (end <= start) {
                Swal.fire("Error", "Valid Until must be later than Valid From", "error");
                return false;
            }

            return true;
        }

        async function handleCreateCoupon(e) {
            e.preventDefault();
            const form = e.target;
            const name = form.querySelector("#couponName").value.trim();
            const offerPrice = parseFloat(form.querySelector("#offerPrice").value);
            const minimumPrice = parseFloat(form.querySelector("#minimumPrice").value);
            const createOn = form.querySelector("#createOn").value;
            const expireOn = form.querySelector("#expireOn").value;

            if (offerPrice <= 0 || minimumPrice <= 0) {
                Swal.fire("Error", "Discount and minimum price must be positive numbers", "error");
                return false;
            }

            if (!validateDates(createOn, expireOn)) {
                return false;
            }

            try {
                const response = await fetch("/admin/coupon/create", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ name, offerPrice, minimumPrice, createOn, expireOn })
                });

                const data = await response.json();
                if (data.success) {
                    Swal.fire({
                        title: "Success",
                        text: "Coupon created successfully!",
                        icon: "success",
                        confirmButtonText: "OK"
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire("Error", data.message || "Failed to create coupon", "error");
                }
            } catch (err) {
                console.error("Error creating coupon:", err);
                Swal.fire("Error", "Server error", "error");
            }
            return false;
        }

        async function handleUpdateCoupon(e) {
            e.preventDefault();
            const form = e.target;
            const id = form.querySelector("#editId").value;
            const name = form.querySelector("#editName").value.trim();
            const offerPrice = parseFloat(form.querySelector("#editOffer").value);
            const minimumPrice = parseFloat(form.querySelector("#editMin").value);
            const createOn = form.querySelector("#editFrom").value;
            const expireOn = form.querySelector("#editUntil").value;

            if (offerPrice <= 0 || minimumPrice <= 0) {
                Swal.fire("Error", "Discount and minimum price must be positive numbers", "error");
                return false;
            }

            if (!validateDates(createOn, expireOn)) {
                return false;
            }

            try {
                const response = await fetch(`/admin/coupon/update/${id}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ name, offerPrice, minimumPrice, createOn, expireOn })
                });

                if (response.ok) {
                    Swal.fire({
                        title: "Success",
                        text: "Coupon updated successfully!",
                        icon: "success",
                        confirmButtonText: "OK"
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    const data = await response.json();
                    Swal.fire("Error", data.message || "Failed to update coupon", "error");
                }
            } catch (err) {
                console.error("Error updating coupon:", err);
                Swal.fire("Error", "Server error", "error");
            }
            return false;
        }

        async function deleteCoupon(id) {
            Swal.fire({
                title: "Are you sure?",
                text: "This coupon will be moved to Previously Used Coupons section.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "No, cancel"
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/coupon/delete/${id}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" }
                        });

                        const data = await response.json();
                        if (data.success) {
                            Swal.fire("Deleted", "Coupon has been moved to Previously Used Coupons.", "success").then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire("Error", data.message || "Failed to delete coupon", "error");
                        }
                    } catch (err) {
                        console.error("Error deleting coupon:", err);
                        Swal.fire("Error", "Server error", "error");
                    }
                }
            });
        }

        function openEditModal(couponData) {
            const coupon = JSON.parse(couponData);
            document.getElementById("editId").value = coupon._id;
            document.getElementById("editName").value = coupon.name;
            document.getElementById("editOffer").value = coupon.offerPrice;
            document.getElementById("editMin").value = coupon.minimumPrice;
            document.getElementById("editFrom").value = coupon.createOn.split("T")[0];
            document.getElementById("editUntil").value = coupon.expireOn.split("T")[0];
            document.getElementById("editCouponModal").style.display = "flex";
        }

        function closeModal() {
            document.getElementById("editCouponModal").style.display = "none";
        }
    </script>
</body>

</html> 